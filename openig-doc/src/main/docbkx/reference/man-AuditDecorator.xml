<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START
  !
  ! This work is licensed under the Creative Commons
  ! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  ! To view a copy of this license, visit
  ! http://creativecommons.org/licenses/by-nc-nd/3.0/
  ! or send a letter to Creative Commons, 444 Castro Street,
  ! Suite 900, Mountain View, California, 94041, USA.
  !
  ! You can also obtain a copy of the license at
  ! trunk/legal/CC-BY-NC-ND.txt.
  ! See the License for the specific language governing permissions
  ! and limitations under the License.
  !
  ! If applicable, add the following below this CCPL HEADER, with the fields
  ! enclosed by brackets "[]" replaced with your own identifying information:
  !      Portions Copyright [yyyy] [name of copyright owner]
  !
  ! CCPL HEADER END
  !
  !      Copyright 2014 ForgeRock AS
  !
-->
<refentry xml:id="AuditDecorator"
          xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="en"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://docbook.org/ns/docbook
                              http://docbook.org/xml/5.0/xsd/docbook.xsd"
          xmlns:xlink="http://www.w3.org/1999/xlink">
 <refmeta>
  <refentrytitle>AuditDecorator</refentrytitle><manvolnum>5</manvolnum>
 </refmeta>

 <refnamediv>
  <refname>AuditDecorator</refname>
  <refpurpose>trigger notification of audit events for Filters and Handlers</refpurpose>
 </refnamediv>

 <refsect1>
  <title>Description</title>

  <indexterm>
   <primary>Decorators</primary>
   <secondary>AuditDecorator</secondary>
  </indexterm>

  <para>
   Triggers notification of audit events for applicable Filters and Handlers.
  </para>

  <para>
   ${projectName} first notifies an audit system sink.
   The audit system sink takes responsibility
   for forwarding notifications to registered audit event listeners.
   The listeners take responsibility for dealing with the audit events.
   What a listener does is implementation specific, but it could for example
   publish the event to an endpoint or to a central system,
   log the event in a file, or raise an alert.
  </para>

  <variablelist>
   <para>
    To help listeners determine what to do with audit events,
    each audit event holds the following information about what it represents.
   </para>

   <varlistentry>
    <term><literal>exchange</literal></term>
    <listitem>
     <para>
      A reference to the
      <link
       xlink:show="new"
       xlink:href="reference#Exchange"
       xlink:role="http://docbook.org/xlink/role/olink"
      >Exchange</link>
      involved in the event.
     </para>

     <para>
      Note that does not represent a copy of the exchange at event creation.
      If notification receivers process the event asynchronously,
      the content of the exchange can change
      between the time the event is created
      and the time the receiver processes the audit event.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>source</literal></term>
    <listitem>
     <para>
      The source of the audit event, meaning the name of the object under audit.
     </para>

     <para>
      For details, see
      <link
       xlink:show="new"
       xlink:href="${javadocBase}/index.html?org/forgerock/openig/audit/AuditSource.html"
      >org.forgerock.openig.audit.AuditSource</link>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>tags</literal></term>
    <listitem>
     <para>
      Strings that qualify the event.
      Entities receiving notifications can use the tags
      to select audit events of interest.
     </para>

     <para>
      Define your own audit tags in order to
      identify particular events or routes.
     </para>

     <itemizedlist>
      <para>
       ${projectName} provides the following built-in tags in
       <link
        xlink:href="${javadocBase}/index.html?org/forgerock/openig/audit/Tag.html"
        xlink:show="new"
       >org.forgerock.openig.audit.Tag</link>.
      </para>

      <listitem>
       <para>
        <literal>request</literal>:
        This event happens before ${projectName} calls the decorated object.
       </para>
      </listitem>

      <listitem>
       <para>
        <literal>response</literal>:
        This event happens after the call to the decorated object
        returns or throws an exception.
       </para>

       <para>
        When decorating a Filter, realize that the filter returns
        after handling the response,
        even if it only filters the request
        and so does nothing to the response but pass it along.
       </para>
      </listitem>

      <listitem>
       <para>
        <literal>completed</literal>:
        This event happens when the processing unit under audit
        has successfully handled the exchange.
        This tag always complements a <literal>response</literal> tag.
       </para>

       <para>
        Note that <literal>completed</literal> says nothing
        about the client application's perception
        of whether the result of the exchange was successful.
        For example, a Handler could successfully pass back
        an HTTP 404 Not Found response.
       </para>
      </listitem>

      <listitem>
       <para>
        <literal>exception</literal>:
        This event happens when the processing unit under audit
        handled the exchange with errors.
        This tag always complements a <literal>response</literal> tag.
       </para>

       <para>
        Note that the source object might not have thrown an exception itself,
        so it is not necessarily the source of the error.
       </para>

       <para>
        Also note that <literal>exception</literal> says nothing
        about the client application's perception
        of whether the result of the exchange was a failure.
        For example, another processing unit could still pass back
        a success response to the client application or proxy
        that engaged the exchange.
       </para>
      </listitem>
     </itemizedlist>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>timestamp</literal></term>
    <listitem>
     <para>
      Timestamp indicating when the event happened, with millisecond precision.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <title>Decorated Object Usage</title>

  <programlisting language="javascript">
{
    "name": string,
    "type": string,
    "config": object,
    "audit": string or array of strings
}
  </programlisting>

  <variablelist>
   <varlistentry>
    <term><code>"name"</code>: string, required except for inline objects</term>
    <listitem>
     <para>
      The unique name of the object, just like an object that is not decorated.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><code>"type"</code>: string, required</term>
    <listitem>
     <para>
      The class name of the decorated object, which must be either a
      <link
       xlink:show="new"
       xlink:href="reference#filter-conf"
       xlink:role="http://docbook.org/xlink/role/olink"
      >Filter</link> or a
      <link
       xlink:show="new"
       xlink:href="reference#handlers-conf"
       xlink:role="http://docbook.org/xlink/role/olink"
      >Handler</link>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><code>"config"</code>: object, required unless empty</term>
    <listitem>
     <para>
      The configuration of the object, just like an object that is not decorated.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><code>"audit"</code>: string or array of strings, required</term>
    <listitem>
     <para>
      Set the value to the tag(s) used to select audit events of interest.
     </para>

     <para>
      To activate the audit decoration without setting any user-defined tags,
      set "audit" to any other value, such as <literal>"audit": true</literal>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <title>Examples</title>

  <para>
   The following example triggers an audit event on a default route.
  </para>

  <programlisting language="javascript">
{
    "handler": "ClientHandler",
    "audit": "Default route"
}
  </programlisting>

  <para>
   The following example triggers an audit event only on a particular object.
  </para>

  <programlisting language="javascript"><![CDATA[
{
    "name": "My Serious Error Handler",
    "type": "StaticResponseHandler",
    "config": {
        "status": 500,
        "reason": "Error",
        "entity": "<html><p>Epic #FAIL</h2></html>"
    },
    "audit": "Epic failure"
}
  ]]></programlisting>

  <para>
   To observe audit events, use a registered audit agent such as a
   <link
    xlink:show="new"
    xlink:href="reference#MonitorEndpointHandler"
    xlink:role="http://docbook.org/xlink/role/olink"
   >MonitorEndpointHandler</link>.
  </para>
 </refsect1>

 <refsect1>
  <title>Javadoc</title>

  <para>
   <link
    xlink:show="new"
    xlink:href="${javadocBase}/index.html?org/forgerock/openig/audit/decoration/AuditDecorator.html"
   >org.forgerock.openig.audit.decoration.AuditDecorator</link>
  </para>
 </refsect1>
</refentry>
