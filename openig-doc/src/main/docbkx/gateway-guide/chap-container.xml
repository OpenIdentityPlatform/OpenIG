<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START
  !
  ! This work is licensed under the Creative Commons
  ! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  ! To view a copy of this license, visit
  ! http://creativecommons.org/licenses/by-nc-nd/3.0/
  ! or send a letter to Creative Commons, 444 Castro Street,
  ! Suite 900, Mountain View, California, 94041, USA.
  !
  ! You can also obtain a copy of the license at
  ! src/main/resources/legal-notices/CC-BY-NC-ND.txt.
  ! See the License for the specific language governing permissions
  ! and limitations under the License.
  !
  ! If applicable, add the following below this CCPL HEADER, with the fields
  ! enclosed by brackets "[]" replaced with your own identifying information:
  !      Portions Copyright [yyyy] [name of copyright owner]
  !
  ! CCPL HEADER END
  !
  !      Copyright 2011-2014 ForgeRock AS
  !    
-->
<chapter xml:id='chap-container'
 xmlns='http://docbook.org/ns/docbook'
 version='5.0' xml:lang='en'
 xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
 xsi:schemaLocation='http://docbook.org/ns/docbook
                     http://docbook.org/xml/5.0/xsd/docbook.xsd'
 xmlns:xlink='http://www.w3.org/1999/xlink'
 xmlns:xinclude='http://www.w3.org/2001/XInclude'>
 <title>Configuring Deployment Containers</title>

 <para>
  This section provides installation and configuration tips
  that you need to run ${projectName} in supported containers.
 </para>

 <para>
  For the full list of supported containers,
  see the <citetitle>Release Notes</citetitle> section,
  <link
   xlink:show="new"
   xlink:href="release-notes#which-container"
   xlink:role="http://docbook.org/xlink/role/olink"
  ><citetitle>Web Application Containers</citetitle></link>.
 </para>

 <para>
  For further information on advanced configuration for a particular container,
  see the container documentation.
 </para>

 <section xml:id="tomcat">
  <title>Configuring Apache Tomcat For ${projectName}</title>

  <para>
   This section describes essential Apache Tomcat configuration
   that you need in order to run ${projectName}.
  </para>

  <indexterm>
   <primary>Containers</primary>
   <secondary>Tomcat</secondary>
  </indexterm>

  <para>
   Download and install a supported version of Apache Tomcat from
   <link xlink:show="new" xlink:href="http://tomcat.apache.org/" />.
  </para>

  <para>
   Configure Tomcat to use the same protocol
   as the application you are protecting with ${projectName}.
   If the protected application is on a remote system,
   configure Tomcat to use the same port as well.
   If your application listens on both an HTTP and an HTTPS port,
   then you must configure Tomcat to do so as well.
  </para>

  <para>
   To configure Tomcat to use an HTTP port other than 8080,
   modify the defaults in <filename>/path/to/tomcat/conf/server.xml</filename>.
   Search for the default value of 8080 and replace it with the new port number.
  </para>

  <section xml:id="tomcat-cookie-domains">
   <title>Configuring Tomcat Cookie Domains</title>

   <para>
    If you use ${projectName} for more than a single protected application
    and the protected applications are on different hosts,
    then you must configure Tomcat to set domain cookies.
    To do this, add a session cookie domain context element
    that specifies the domain to
    <filename>/path/to/conf/Catalina/<replaceable>server</replaceable>/root.xml</filename>,
    as in the following example.
   </para>

   <programlisting language="xml">
<xinclude:include href="resources/tomcat-cookie-domains-xml.txt" parse="text">
 <xinclude:fallback>Failed to include session cookie domain configuration</xinclude:fallback>
</xinclude:include>
   </programlisting>

   <para>
    Restart Tomcat to read the configuration changes.
   </para>
  </section>

  <section xml:id="tomcat-https">
   <title>Configuring Tomcat For HTTPS</title>

   <para>
    To get Tomcat up quickly on an SSL port
    add an entry similar to the following in
    <filename>/path/to/tomcat/conf/server.xml</filename>.
   </para>

   <programlisting language="xml">
<xinclude:include href="resources/tomcat-https-xml.txt" parse="text">
 <xinclude:fallback>Failed to include HTTPS configuration</xinclude:fallback>
</xinclude:include>
   </programlisting>

   <para>
    Also create a key store holding a self-signed certificate.
   </para>

   <screen>
$ <userinput>keytool \
 -genkey \
 -alias tomcat \
 -keyalg RSA \
 -keystore /path/to/tomcat/conf/keystore \
 -storepass password \
 -keypass password \
 -dname "CN=openig.example.com,O=Example Corp,C=FR"
   </userinput>
   </screen>

   <para>
    Notice the key store file location and the key store password
    both match the configuration.
    By default, Tomcat looks for a certificate with alias <literal>tomcat</literal>.
   </para>

   <para>
    Restart Tomcat to read the configuration changes.
   </para>

   <para>
    Browsers generally do not trust self-signed certificates.
    To work with a certificate signed instead by a trusted CA,
    see the Apache Tomcat documentation on configuring HTTPS.
   </para>
  </section>

  <section xml:id="tomcat-mysql">
   <title>Configuring Tomcat to Access MySQL Over JNDI</title>

   <para>
    If ${projectName} accesses an SQL database,
    then you must configure Apache Tomcat to access the database over JNDI.
    To do so, you must add the driver jar for the database,
    set up a JNDI data source, and set up a reference to that data source.
   </para>

   <orderedlist>
    <para>
     The following steps are for MySQL Connector/J.
    </para>

    <listitem>
     <para>
      Download the MySQL JDBC Driver Connector/J from
      <link xlink:show="new" xlink:href="http://dev.mysql.com/downloads/connector/j" />.
     </para>
    </listitem>

    <listitem>
     <para>
      Copy the driver .jar to <filename>/path/to/tomcat/lib/</filename>
      so that it is on Tomcat's class path.
     </para>
    </listitem>

    <listitem>
     <para>
      Add a JNDI data source for your MySQL server and database in
      <filename>/path/to/tomcat/conf/context.xml</filename>.
     </para>

     <programlisting language="xml">
<xinclude:include href="resources/tomcat-data-source-xml.txt" parse="text">
 <xinclude:fallback>Failed to include data source configuration</xinclude:fallback>
</xinclude:include>
     </programlisting>
    </listitem>

    <listitem>
     <para>
      Add a resource reference to the data source in
      <filename>/path/to/tomcat/conf/web.xml</filename>.
     </para>

     <programlisting language="xml">
<xinclude:include href="resources/tomcat-resource-ref-xml.txt" parse="text">
 <xinclude:fallback>Failed to include resource ref configuration</xinclude:fallback>
</xinclude:include>
     </programlisting>
    </listitem>

    <listitem>
     <para>
      Restart Tomcat to read the configuration changes.
     </para>
    </listitem>
   </orderedlist>
  </section>
 </section>

 <section xml:id="jetty">
  <title>Configuring Jetty For ${projectName}</title>

  <para>
   This section describes essential Jetty configuration
   that you need in order to run ${projectName}.
  </para>

  <indexterm>
   <primary>Containers</primary>
   <secondary>Jetty</secondary>
  </indexterm>

  <para>
   Download and install a supported version of Jetty from
   <link xlink:show="new" xlink:href="http://download.eclipse.org/jetty/" />.
  </para>

  <para>
   Configure Jetty to use the same protocol
   as the application you are protecting with ${projectName}.
   If the protected application is on a remote system,
   configure Jetty to use the same port as well.
   If your application listens on both an HTTP and an HTTPS port,
   then you must configure Jetty to do so as well.
  </para>

  <para>
   To configure Jetty to use an HTTP port other than 8080,
   modify the defaults in <filename>/path/to/jetty/etc/jetty.xml</filename>.
   Search for the default value of 8080 and replace it with the new port number.
  </para>

  <section xml:id="jetty-cookie-domains">
   <title>Configuring Jetty Cookie Domains</title>

   <para>
    If you use ${projectName} for more than a single protected application
    and the protected applications are on different hosts,
    then you must configure Jetty to set domain cookies.
    To do this, add a session domain handler element
    that specifies the domain to
    <filename>/path/to/jetty/etc/jetty.xml</filename>,
    as in the following example.
   </para>

   <programlisting language="xml">
<xinclude:include href="resources/jetty-cookie-domains-xml.txt" parse="text">
 <xinclude:fallback>Failed to include session domain handler configuration</xinclude:fallback>
</xinclude:include>
   </programlisting>

   <para>
    Restart Jetty to read the configuration changes.
   </para>
  </section>

  <!-- TODO pending OPENIG-185... need to adapt the content here...
  <section xml:id="jetty-https">
   <title>Configuring Jetty For HTTPS</title>

   <para>
    To get Jetty up quickly on an SSL port
    add an entry similar to the following in
    <filename>/path/to/jetty/etc/jetty.xml</filename>.
   </para>

   <programlisting language="xml">
<xinclude:include href="resources/TODO-xml.txt" parse="text">
 <xinclude:fallback>Failed to include HTTPS configuration</xinclude:fallback>
</xinclude:include>
   </programlisting>

   <para>
    Also create a key store holding a self-signed certificate.
   </para>

   <screen>
$ <userinput>keytool \
 -genkey \
 -alias jetty \
 -keyalg RSA \
 -keystore /path/to/jetty/etc/keystore \
 -storepass password \
 -keypass password \
 -dname "CN=openig.example.com,O=Example Corp,C=FR"
   </userinput>
   </screen>

   <para>
    Notice the key store file location and the key store password
    both match the configuration.
    TODO Jetty too: By default, Jetty looks for a certificate with alias <literal>jetty</literal>.
   </para>

   <para>
    Browsers generally do not trust self-signed certificates.
    To work with a certificate signed instead by a trusted CA,
    see the Jetty documentation on configuring HTTPS.
   </para>
  </section>
  -->

  <section xml:id="jetty-mysql">
   <title>Configuring Jetty to Access MySQL Over JNDI</title>

   <para>
    If ${projectName} accesses an SQL database,
    then you must configure Jetty to access the database over JNDI.
    To do so, you must add the driver jar for the database,
    set up a JNDI data source, and set up a reference to that data source.
   </para>

   <orderedlist>
    <para>
     The following steps are for MySQL Connector/J.
    </para>

    <listitem>
     <para>
      Download the MySQL JDBC Driver Connector/J from
      <link xlink:show="new" xlink:href="http://dev.mysql.com/downloads/connector/j" />.
     </para>
    </listitem>

    <listitem>
     <para>
      Copy the driver .jar to <filename>/path/to/jetty/lib/jndi/</filename>
      so that it is on Jetty's class path.
     </para>
    </listitem>

    <listitem>
     <para>
      Add a JNDI data source for your MySQL server and database in
      <filename>/path/to/jetty/etc/jetty.xml</filename>.
     </para>

     <programlisting language="xml">
<xinclude:include href="resources/jetty-data-source-xml.txt" parse="text">
 <xinclude:fallback>Failed to include data source configuration</xinclude:fallback>
</xinclude:include>
     </programlisting>
    </listitem>

    <listitem>
     <para>
      Add a resource reference to the data source in
      <filename>/path/to/jetty/etc/webdefault.xml</filename>.
     </para>

     <programlisting language="xml">
<xinclude:include href="resources/jetty-resource-ref-xml.txt" parse="text">
 <xinclude:fallback>Failed to include resource ref configuration</xinclude:fallback>
</xinclude:include>
     </programlisting>
    </listitem>

    <listitem>
     <para>
      Restart Jetty to read the configuration changes.
     </para>
    </listitem>
   </orderedlist>
  </section>
 </section>
</chapter>
