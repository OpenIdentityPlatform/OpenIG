<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START
  !
  ! This work is licensed under the Creative Commons
  ! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  ! To view a copy of this license, visit
  ! http://creativecommons.org/licenses/by-nc-nd/3.0/
  ! or send a letter to Creative Commons, 444 Castro Street,
  ! Suite 900, Mountain View, California, 94041, USA.
  !
  ! You can also obtain a copy of the license at
  ! src/main/resources/legal-notices/CC-BY-NC-ND.txt.
  ! See the License for the specific language governing permissions
  ! and limitations under the License.
  !
  ! If applicable, add the following below this CCPL HEADER, with the fields
  ! enclosed by brackets "[]" replaced with your own identifying information:
  !      Portions Copyright [yyyy] [name of copyright owner]
  !
  ! CCPL HEADER END
  !
  !      Copyright 2011-2014 ForgeRock AS
  !    
-->
<chapter xml:id='chap-troubleshooting'
         xmlns='http://docbook.org/ns/docbook' version='5.0' xml:lang='en'
         xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
         xsi:schemaLocation='http://docbook.org/ns/docbook
                             http://docbook.org/xml/5.0/xsd/docbook.xsd'
         xmlns:xlink='http://www.w3.org/1999/xlink'>
 <title>Troubleshooting</title>

 <indexterm>
  <primary>Troubleshooting</primary>
 </indexterm>

 <para>
  This chapter covers common problems and their solutions.
 </para>

 <section xml:id="troubleshooting-object-not-found-in-heap">
  <title>Object not found in heap</title>

  <programlisting language="none">
org.forgerock.json.fluent.JsonValueException: /handler:
   object Router2 not found in heap
    at org.forgerock.openig.heap.HeapImpl.resolve(HeapImpl.java:351)
    at org.forgerock.openig.heap.HeapImpl.resolve(HeapImpl.java:334)
    at org.forgerock.openig.heap.HeapImpl.getHandler(HeapImpl.java:538)
  </programlisting>

  <para>
   You have specified "handler": "Router2"
   in <filename>config.json</filename>,
   but no handler configuration object named "Router2" exists.
   Make sure you have added an entry for the handler
   and that you have correctly spelled its name.
  </para>
 </section>

 <section xml:id="troubleshooting-invalid-json">
  <title>Extra or missing character / invalid JSON</title>

  <programlisting language="none">
HTTP ERROR 500

Problem accessing /wp/wp-login.php. Reason:

    Server Error

Caused by:

    org.forgerock.openig.handler.HandlerException: no handler to dispatch to
  </programlisting>
  
  <para>
   A better description of the error appears as an error in the console log:
  </para>
 
  <programlisting language="none">  
TUE DEC 02 17:35:57 CET 2014 (ERROR) {Router}/handler
The route defined in file '/Users/me/.openig/config/routes/route1.json'
 cannot be added
------------------------------
TUE DEC 02 17:35:57 CET 2014 (ERROR) {Router}/handler
Cannot read/parse content of /Users/me/.openig/config/routes/route1.json
[            HeapException] > Cannot read/parse content of
                              /Users/me/.openig/config/routes/route1.json
[       JsonParseException] > Unexpected character (',' (code 44)):
                              was expecting double-quote to start field name
 at [Source: java.io.InputStreamReader@4c8d1091; line: 4, column: 28]
  </programlisting>
  
  <para>
   In this case, extra comma is spotted at line 4, column 28.
  </para>

  <para>
   Use a JSON editor or JSON validation tool such as
   <link
    xlink:show="new"
    xlink:href="http://jsonlint.com/"
   >JSONLint</link> to make sure your JSON is valid.
  </para>
 </section>

 <section xml:id="troubleshooting-flat-file-values-not-correct">
  <title>The values in the flat file are incorrect</title>

  <para>
   Ensure the flat file is readable
   by the user running the container for ${projectName}.
   Values are all characters, including space and tabs,
   between the separator, so make sure the values are not padded with spaces.
  </para>
 </section>

 <section xml:id="troubleshooting-problem-accessing-url">
  <title>Problem accessing URL</title>

  <programlisting language="none">
HTTP ERROR 500

Problem accessing /myURL . Reason:

java.lang.String cannot be cast to java.util.List
Caused by:
java.lang.ClassCastException: java.lang.String cannot be cast to java.util.List
  </programlisting>

  <para>
   This error is typically encountered when using the
   <link
    xlink:href="reference#AssignmentFilter"
    xlink:role="http://docbook.org/xlink/role/olink"
   >AssignmentFilter</link>
   and setting a string value for one of the Headers.
   All headers are stored in Lists
   so the header must be addressed with a subscript.
  </para>

  <para>
   For example, if you try to set
   <literal>exchange.request.headers['Location']</literal>
   for a redirect in the response object, you should instead set
   <literal>exchange.request.headers['Location'][0]</literal>.
   A header without a subscript leads to the error above.
  </para>
 </section>

 <section xml:id="troubleshooting-static-response-handler-blank-page">
  <title>StaticResponseHandler results in a blank page</title>

  <para>
   You must define an entity for the response as in the following example.
  </para>

  <programlisting language="javascript"><![CDATA[
{
    "name": "AccessDeniedHandler",
    "type": "StaticResponseHandler",
    "config": {
        "status": 403,
        "reason": "Forbidden",
        "entity": "<html><p>User does not have permission</p></html>"
    }
}
  ]]></programlisting>
 </section>

 <section xml:id="troubleshooting-not-logging-users-in">
  <title>${projectName} is not logging users in</title>

  <para>
   If you are proxying to more than one application in multiple DNS domains,
   you must make sure your container is enabled for domain cookies.
   For details on your specific container, see the section on
   <link
    xlink:show="new"
    xlink:href="gateway-guide#configure-container"
    xlink:role="http://docbook.org/xlink/role/olink"
   ><citetitle>Configuring Deployment Containers</citetitle></link>.
  </para>
 </section>

 <section xml:id="troubleshooting-read-timeout-sending-request">
  <title>Read timed out error when sending a request</title>

  <para>
   If a "baseURI" configuration setting
   causes a request to come back to ${projectName},
   ${projectName} never produces a response to the request.
   You then observe the following behavior.
  </para>

  <para>
   You send a request and ${projectName} seems to hang.
   Then you see a failure message,
   <literal>HTTP Status 500 - Read timed out</literal>,
   accompanied by ${projectName} throwing an exception,
   <literal>java.net.SocketTimeoutException: Read timed out</literal>.
  </para>

  <para>
   To fix this issue, make sure
   that "baseURI" configuration settings do not cause requests
   to come back to ${projectName}.
  </para>
 </section>

 <section xml:id="troubleshooting-new-route-not-used">
  <title>${projectName} does not use new route configuration</title>

  <para>
   ${projectName} loads all configuration at startup.
   By default, it then periodically reloads changed route configurations.
  </para>

  <para>
   If you make changes to a route
   that result in an invalid configuration,
   ${projectName} logs errors,
   but it keeps the previous, correct configuration,
   and continues to use the old route.
  </para>

  <para>
   ${projectName} only uses the new configuration
   after you save a valid version or when you restart ${projectName}.
  </para>

  <para>
   Of course, if you restart ${projectName} with an invalid route configuration,
   then ${projectName} tries to load the invalid route at startup
   and logs an error.
   In that case, if there is no default handler to accept any incoming exchange
   for the invalid route, then you see an error,
   <literal>No handler to dispatch to</literal>.
  </para>
 </section>

 <section xml:id="troubleshooting-skip-a-route">
  <title>Make ${projectName} skip a route</title>

  <para>
   If you have copied routes from another ${projectName} server,
   those routes might depend on environment or container configuration
   that you have not yet configured locally.
  </para>

  <para>
   You can work around this problem by changing the route file extension.
   A router ignores route files
   that do not have the <literal>.json</literal> extension.
  </para>

  <para>
   For example, suppose you copy route all sample route configurations
   from the documentation, and then start ${projectName}
   without first configuring your container.
   This can result in an error such as the following.
  </para>

  <informalexample>
   <programlisting language="none">
org.forgerock.json.fluent.JsonValueException:
 /handler/config/filters/0/config/dataSource:
 javax.naming.NameNotFoundException;
 remaining name 'jdbc/forgerock'
  at org.forgerock.openig.servlet.GatewayServlet.init(GatewayServlet.java:222)
  at org.eclipse.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:595)
  at org.eclipse.jetty.servlet.ServletHolder.getServlet(ServletHolder.java:458)
  at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:724)
   </programlisting>
  </informalexample>

  <para>
   This arises from the route in <filename>03-sql.json</filename>,
   which defines an "SqlAttributesFilter"
   that depends on a JNDI data source configured in the container.
  </para>

  <programlisting language="javascript">
{
    "type": "SqlAttributesFilter",
    "config": {
        "dataSource": "java:comp/env/jdbc/forgerock",
        "preparedStatement":
          "SELECT username, password FROM users WHERE email = ?;",
        "parameters": [
            "george@example.com"
        ],
        "target": "${exchange.credentials}"
    }
}
  </programlisting>

  <para>
   To prevent ${projectName} from loading the route configuration
   until you have had time to configure the container,
   change the file extension to render the route inactive.
  </para>

  <screen>
$ <userinput>mv ~/.openig/config/routes/03-sql.json ~/.openig/config/routes/03-sql.inactive</userinput>
  </screen>

  <para>
   If necessary, restart the container
   to force ${projectName} to reload the configuration.
  </para>

  <para>
   When you have configured the data source in the container,
   change the file extension back to <literal>.json</literal>
   to render the route active again.
  </para>

  <screen>
$ <userinput>mv ~/.openig/config/routes/03-sql.inactive ~/.openig/config/routes/03-sql.json</userinput>
  </screen>
 </section>
</chapter>
