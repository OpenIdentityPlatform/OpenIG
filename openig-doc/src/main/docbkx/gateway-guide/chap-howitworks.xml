<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START
  !
  ! This work is licensed under the Creative Commons
  ! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  ! To view a copy of this license, visit
  ! http://creativecommons.org/licenses/by-nc-nd/3.0/
  ! or send a letter to Creative Commons, 444 Castro Street,
  ! Suite 900, Mountain View, California, 94041, USA.
  !
  ! You can also obtain a copy of the license at
  ! src/main/resources/legal-notices/CC-BY-NC-ND.txt.
  ! See the License for the specific language governing permissions
  ! and limitations under the License.
  !
  ! If applicable, add the following below this CCPL HEADER, with the fields
  ! enclosed by brackets "[]" replaced with your own identifying information:
  !      Portions Copyright [yyyy] [name of copyright owner]
  !
  ! CCPL HEADER END
  !
  !      Copyright 2011-2014 ForgeRock AS
  !    
-->
<chapter xml:id='chap-howitworks'
 xmlns='http://docbook.org/ns/docbook'
 version='5.0' xml:lang='en'
 xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
 xsi:schemaLocation='http://docbook.org/ns/docbook
                     http://docbook.org/xml/5.0/xsd/docbook.xsd'
 xmlns:xlink='http://www.w3.org/1999/xlink'>
 <title>How ${projectName} Works</title>

 <indexterm>
  <primary>Architecture</primary>
 </indexterm>

 <para>This chapter provides a detailed look at ${projectName} components and how
 they work together.</para>
 
 <section xml:id="how-it-works-short">
  <title>How It Works In A Nutshell</title>

  <para>The underlying core of ForgeRock ${projectName} is based on a
  <link xlink:show="new" xlink:href="http://en.wikipedia.org/wiki/Reverse_proxy"
  >reverse proxy architecture</link>. All HTTP traffic to each protected
  application is routed through ${projectName}, enabling close inspection,
  transformation and filtering of each request.  By inspecting the traffic,
  ${projectName} is able to intercept requests that would normally require the user to
  authenticate, obtain the user's login credentials, and send the necessary
  HTTP request to the target application, thereby logging in the user without
  modifying or installing anything on the application.  In its simplest form
  and basic configuration, ${projectName} is a Java-based reverse proxy which runs as
  a web application.  Enable the Form-Filter replay module and ${projectName}
  automatically log users in when a timeout or authentication page is detected.
  Additionally, enable the SAML2 service and ${projectName} becomes a SAML2
  endpoint. In this mode of operation, ${projectName} receives
  and verifies the SAML2 request and then logs the user directly
  into the target application.</para>
 </section>

 <section xml:id="how-it-works-detail">
  <title>How It Works In Detail</title>

  <para>The following modules make up ${projectName}.</para>

  <section xml:id="how-it-works-core">
   <title>${projectName} Core (Reverse Proxy)</title>

   <para>${projectName} core is a standard Java EE servlet implementation of a reverse
   proxy. The main function of ${projectName} core is to act as a reverse proxy to the
   target application. When deployed in its base configuration, ${projectName} can be
   used as a pure reverse proxy. The power of the ${projectName} core comes in its
   ability to search, transform, and process HTTP traffic to and from the
   target application. This enables ${projectName} to recognize login pages, submit
   login forms, transform or filter content, and even function as a Federation
   endpoint for the application.  All these features are possible without
   making any changes to the application's deployment container or the
   application itself.</para>
  </section>

  <section xml:id="how-it-works-exchange">
   <title>Exchange</title>
   <para>The <link xlink:href="reference#Exchange"
   xlink:role="http://docbook.org/xlink/role/olink">Exchange</link> is a
   wrapper around the HTTP request and response objects that pass through
   ${projectName}. Every request or response being processed in ${projectName} can be accessed
   or modified through the Exchange object.  In addition, arbitrary data can
   be set in the Exchange to facilitate the passing of data and state between
   filters and handlers.</para>
  </section>

  <section xml:id="how-it-works-router">
   <title>Router &amp; Routes</title>

   <para>
    In a multiple-file configuration, the
    <link
    xlink:show="new"
    xlink:href="reference#Router"
    xlink:role="http://docbook.org/xlink/role/olink"
    >Router</link>
    takes responsibility for managing
    <link
    xlink:show="new"
    xlink:href="reference#Route"
    xlink:role="http://docbook.org/xlink/role/olink"
    >Route</link> configurations.
   </para>

   <para>
    Each Route accepts all Exchanges that match its (configurable) condition.
    The Route then optionally changes the request scheme, host, and port,
    and forwards the Exchange on to the configured chain of filters and handlers.
   </para>

   <para>
    The Router can be configured either
    to load Route configurations only at startup
    or to reload Route configurations periodically,
    picking up any changes you make.
    You can thus reconfigure ${projectName} without restarting the server.
   </para>
  </section>

  <section xml:id="how-it-works-dispatcher">
   <title>Dispatcher</title>

   <para>
    In a single-file configuration with no Router,
    the Dispatcher may be thought of as the internal router of ${projectName}.
    Every request that comes into ${projectName} is analyzed
    and forwarded on to the configured processing chain of filters and handlers.
    A request may be forwarded based on
    the target host, URL, URL parameters, headers, cookies,
    or any other component of the request.
   </para>
  </section>

  <section xml:id="how-it-works-chain">
   <title>Chain</title>
   <para>A <link xlink:href="reference#Chain"
   xlink:role="http://docbook.org/xlink/role/olink">Chain</link> is a
   combination of one or more Filters and a handler that process an incoming
   request from the Dispatcher. For example, the Dispatcher can process an
   incoming request with a URL parameter of <literal>action=login</literal>
   and forward the request to the Login Chain. The Login Chain executes a list
   of Filters and then calls a Handler. The Handler sends the request on to
   the target application or to another Chain for further processing.</para>
  </section>

  <section xml:id="how-it-works-handlers">
   <title>Handlers</title>

   <para>The final processing of every Chain ends in a call to a Handler. A
   Handler can simply call another Chain or it can send the request on to the
   target application. The following Handlers are shipped with ${projectName}:</para>

   <itemizedlist>
    <listitem>
     <para>
      <link
       xlink:show="new"
       xlink:href="reference#ClientHandler"
       xlink:role="http://docbook.org/xlink/role/olink"
      >ClientHandler</link>: Sends the final request to the target application.
     </para>

     <para>
      You can specify HTTP client settings for requests to remote servers
      by adding an
      <link
       xlink:show="new"
       xlink:href="reference#HttpClient"
       xlink:role="http://docbook.org/xlink/role/olink"
      >HttpClient</link>
      in the configuration for the <literal>ClientHandler</literal>.
     </para>
    </listitem>

    <listitem>
     <para>
      <link
       xlink:show="new"
       xlink:href="reference#Router"
       xlink:role="http://docbook.org/xlink/role/olink"
      >Router</link>: Routes Exchange processing to separate configuration files.
     </para>
    </listitem>

    <listitem>
     <para>
      <link
       xlink:show="new"
       xlink:href="reference#ScriptableHandler"
       xlink:role="http://docbook.org/xlink/role/olink"
      >ScriptableHandler</link>: Handles a request by using a script.
     </para>
    </listitem>

    <listitem>
     <para><link xlink:href="reference#SequenceHandler"
     xlink:role="http://docbook.org/xlink/role/olink">SequenceHandler</link>:
     Links together multiple handlers or chains during request
     processing.</para>
    </listitem>

    <listitem>
     <para><link xlink:href="reference#StaticResponseHandler"
     xlink:role="http://docbook.org/xlink/role/olink"
     >StaticResponseHandler</link>: Used to send a response, such as a
     redirect, to a client during request processing.</para>
    </listitem>
   </itemizedlist>
  </section>

  <section xml:id="how-it-works-filters">
   <title>Filters</title>
   <para>Filters are responsible for processing HTTP requests in ${projectName}.
   Filters can be chained together to act on the input stream coming from the
   browser, or the  output stream returned back from the target application.
   A filter can do something as simple as logging the input and output stream
   or something more complex, such as processing login pages, fetching user
   attributes, or transforming content. There are multiple Filters shipped with
   ${projectName} that can be combined in chains to provide very extensible request and
   response processing features. Custom filters can also be written using the
   Java SPIs. The following is a list of Filters shipped with ${projectName}:</para>

   <itemizedlist>
    <listitem>
     <para><link xlink:href="reference#AssignmentFilter"
     xlink:role="http://docbook.org/xlink/role/olink">AssignmentFilter</link>:
     Sets values in the HTTP request and response.</para>
    </listitem>

    <listitem>
     <para><link xlink:href="reference#CaptureFilter"
     xlink:role="http://docbook.org/xlink/role/olink">CaptureFilter</link>:
     Captures the HTTP requests being processed by ${projectName}. Capture can be used
     for audit purposes and may also be very useful when analyzing an
     application or troubleshooting a misbehaving ${projectName}. Logs are written to
     a flat file on the ${projectName} host.</para>
    </listitem>

    <listitem>
     <para><link xlink:href="reference#CookieFilter"
     xlink:role="http://docbook.org/xlink/role/olink">CookieFilter</link>:
     The default behavior of ${projectName} is to accept and forward all cookies.
     Since this is not always the desirable behavior, the CookieFilter, when
     configured, allows you to suppress, manage, and relay cookies.</para>
    </listitem>

    <listitem>
     <para><link xlink:href="reference#EntityExtractFilter"
     xlink:role="http://docbook.org/xlink/role/olink"
     >EntityExtractFilter</link>: Searches for specific content within the body
     of the requests. For example, it can be used to extract hidden form
     parameters in a login page, which are needed in the login request.</para>
    </listitem>

    <listitem>
     <para><link xlink:href="reference#ExceptionFilter"
     xlink:role="http://docbook.org/xlink/role/olink">ExceptionFilter</link>:
     Sends users to configured URLs when errors or exceptions occur during
     request processing or user interactions.</para>
    </listitem>

    <listitem>
     <para><link xlink:href="reference#FileAttributesFilter"
     xlink:role="http://docbook.org/xlink/role/olink"
     >FileAttributesFilter</link>: Looks up attributes in a flat file with the
     specified key. The attributes are added to the exchange to be used by
     subsequent filters or handlers.</para>
    </listitem>

    <listitem>
     <para><link xlink:href="reference#HeaderFilter"
     xlink:role="http://docbook.org/xlink/role/olink">HeaderFilter</link>:
     The default behavior of ${projectName} is to accept and forward all headers.
     The HeaderFilter can be configured to add additional headers or remove
     headers on both the HTTP request and the response. It can also be
     configured to parse and set header values in ${projectName} context to allow
     filters access to the header attributes. This feature is used most
     commonly when ${projectName} is integrated with OpenAM and being fronted by a
     policy agent.</para>
    </listitem>

    <listitem>
     <para><link xlink:href="reference#HttpBasicAuthFilter"
     xlink:role="http://docbook.org/xlink/role/olink"
     >HttpBasicAuthFilter</link>: Performs HTTP basic authentication to the
     target application per <link xlink:show="new"
     xlink:href="http://www.ietf.org/rfc/rfc2617.txt">RFC 2617</link>.</para>
    </listitem>

    <listitem>
     <para><link xlink:href="reference#RedirectFilter"
     xlink:role="http://docbook.org/xlink/role/olink"
     >RedirectFilter</link>: Rewrites Location headers on responses that
     generate a redirect that would take the user directly to the application
     being proxied rather than taking the user through ${projectName}.</para>
    </listitem>

    <listitem>
     <para>
      <link
      xlink:show="new"
      xlink:href="reference#ScriptableFilter"
      xlink:role="http://docbook.org/xlink/role/olink"
      >ScriptableFilter</link>: Processes the HTTP exchange by using a script.
     </para>
    </listitem>

    <listitem>
     <para><link xlink:href="reference#SqlAttributesFilter"
     xlink:role="http://docbook.org/xlink/role/olink"
     >SqlAttributesFilter</link>: Executes an SQL prepared statement with
     configured parameters. The result is added to the exchange to be used by
     subsequent filters or handlers.</para>
    </listitem>

    <listitem>
     <para><link xlink:href="reference#StaticRequestFilter"
     xlink:role="http://docbook.org/xlink/role/olink"
     >StaticRequestFilter</link>: Creates and sends HTTP GET and POST requests.
     The request can be formed using parameters from previous processing or
     statically configured values.</para>
    </listitem>

    <listitem>
     <para><link xlink:href="reference#SwitchFilter"
     xlink:role="http://docbook.org/xlink/role/olink">SwitchFilter</link>:
     Conditionally diverts the exchange to another handler.</para>
    </listitem>
   </itemizedlist>
  </section>

  <section xml:id="how-it-works-configuration">
   <title>Configuration</title>

   <para>The configuration of ${projectName} was designed to be very modular and
   self-contained. Each module within ${projectName} stores its configuration in JSON
   representation, which is stored in flat files. The
   features of ${projectName} can be configured by directly manipulating the JSON flat
   files.</para>
  </section>

  <section xml:id="how-it-works-heaplets">
   <title>Heaplets</title>

   <para>Every ${projectName} module which has JSON configuration also has a Heaplet
   associated with it. Each module's Heaplet is responsible for reading the
   JSON configuration and creating that module's configuration in the ${projectName}
   runtime heap. Each module can then read its configuration from the heap as
   well as make shared configuration information available to other
   modules.</para>
  </section>

  <section xml:id="how-it-works-services">
   <title>Services</title>

   <para>
    The Services model was designed to allow the integration of
    value added features, such as Federation,
    without requiring them to be tightly bound
    to the ${projectName} implementation.
    SAML 2.0 is an added service currently shipped with ${projectName}.
   </para>
  </section>

  <section xml:id="how-it-works-saml2">
   <title>${projectName} SAML 2.0 Federation</title>

   <para>
    When the Federation component is configured,
    ${projectName} acts as the Service Provider in a Circle of Trust
    with a SAML 2.0-compliant Identity Provider.
    The Federation component supports both IDP and SP-initiated
    SAML 2.0 Web Single Sign-On.
    ${projectName} Federation can serve as a a Service Provider
    in the classic Federation use case
    where the IDP and SP are different companies or domains.
    <!-- Revisit this when the fed. component can request policy decisions
    The ${projectName} SP can also be a standards-based alternative
    to an OpenAM policy agent for internal enterprise applications
    that want to move away from installing agents
    in web servers and in Java EE application servers.
    -->
   </para>
  </section>

 </section>
</chapter>
