<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START
  !
  ! This work is licensed under the Creative Commons
  ! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  ! To view a copy of this license, visit
  ! http://creativecommons.org/licenses/by-nc-nd/3.0/
  ! or send a letter to Creative Commons, 444 Castro Street,
  ! Suite 900, Mountain View, California, 94041, USA.
  !
  ! You can also obtain a copy of the license at
  ! src/main/resources/legal-notices/CC-BY-NC-ND.txt.
  ! See the License for the specific language governing permissions
  ! and limitations under the License.
  !
  ! If applicable, add the following below this CCPL HEADER, with the fields
  ! enclosed by brackets "[]" replaced with your own identifying information:
  !      Portions Copyright [yyyy] [name of copyright owner]
  !
  ! CCPL HEADER END
  !
  !      Copyright 2011-2012 ForgeRock AS
  !    
-->
<chapter xml:id='chap-mediawiki-tutorial'
 xmlns='http://docbook.org/ns/docbook'
 version='5.0' xml:lang='en'
 xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
 xsi:schemaLocation='http://docbook.org/ns/docbook http://docbook.org/xml/5.0/xsd/docbook.xsd'
 xmlns:xlink='http://www.w3.org/1999/xlink'
 xmlns:xinclude='http://www.w3.org/2001/XInclude'>
 <title>Tutorial With MediaWiki</title>

 <itemizedlist>
  <para>MediaWiki is a good example of a login sequence that is a bit more
  complex and shows you how OpenIG can extract hidden values in order to create
  the required login form. This sample uses a hosted version of MediaWiki at
  <link xlink:href="http://demo.forgerock.com:8181/mediawiki/" xlink:show="new"
  >http://demo.forgerock.com:8181/mediawiki/</link>. The sample enables you
  to do the following:</para>

  <listitem>
   <para>Register a user name and password on the MediaWiki server.</para>
  </listitem>
  <listitem>
   <para>Download and install OpenIG on your local system.</para>
  </listitem>
  <listitem>
   <para>Configure OpenIG to log into MediaWiki using the user name and
   password you registered.</para>
  </listitem>
  <listitem>
   <para>Understand the details of what OpenIG is doing behind the
   scenes.</para>
  </listitem>
 </itemizedlist>

 <section>
  <title>Detailed Flow</title>

  <para>The figure below illustrates the flow of requests for a user accessing
  the <link xlink:href="http://demo.forgerock.com:8181/mediawiki/"
  xlink:show="new">http://demo.forgerock.com:8181/mediawiki/</link> site
  through OpenIG.</para>

  <mediaobject>
   <imageobject>
    <imagedata fileref="images/mediawiki-tutorial.png" format="PNG" />
   </imageobject>
   <textobject>
    <para>This diagram shows the flow of requests during user login.</para>
   </textobject>
  </mediaobject>

  <orderedlist>
   <listitem>
    <para>User browses to the Wiki and clicks on the login link, browser does
    a DNS request to get the IP address for the Wiki host.</para>
   </listitem>
   <listitem>
    <para>DNS returns the IP Address of OpenIG, browser sends the request to
    OpenIG.</para>
   </listitem>
   <listitem>
    <para>OpenIG inspects the request and finds a match for the login
    page.</para>
   </listitem>
   <listitem>
    <para>OpenIG sends the request for the login page.</para>
   </listitem>
   <listitem>
    <para>Wiki returns the login page with hidden value.</para>
   </listitem>
   <listitem>
    <para>OpenIG extracts the hidden value needed for login.</para>
   </listitem>
   <listitem>
    <para>OpenIG creates the login page.</para>
   </listitem>
   <listitem>
    <para>OpenIG POSTs the login form to the Wiki.</para>
   </listitem>
   <listitem>
    <para>Wiki receives the login form, validates the user and the hidden value
    and returns the user's Wiki page.</para>
   </listitem>
   <listitem>
    <para>OpenIG returns the user's home page to the browser.</para>
   </listitem>
  </orderedlist>
 </section>

 <section>
  <title>Setup Summary</title>

  <itemizedlist>
   <para>To keep things simple, these instructions assume you are running OpenIG
   and the Browser on a single host.  If they are on separate hosts, make sure
   the host or DNS changes impact the Browser host. This tutorial also assumes
   Jetty 7 for the container, but you can use any supported container.</para>

   <listitem>
    <para>OpenIG IP address 10.0.1.1 (substitute your OpenIG's IP
    address)</para>
   </listitem>
   <listitem>
    <para>Jetty 7 listening on port 8181</para>
   </listitem>
   <listitem>
    <para>OpenIG deployed under the root context</para>
   </listitem>
   <listitem>
    <para>DNS or <filename>/etc/hosts</filename> pointing
    <literal>demo.forgerock.com</literal> to 10.0.1.1 (substitute your OpenIG's
    IP address)</para>
   </listitem>
  </itemizedlist>
 </section>

 <section>
  <title>Installing OpenIG</title>

  <para>See <link xlink:href="gateway-guide#chap-quickstart"
  xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Getting
  Started</citetitle></link> for instructions, and have your container listen
  on port 8181.</para>
 </section>

 <section>
  <title>Configuring the Browser Host</title>

  <para>With OpenIG running, configure the browser to go through OpenIG to
  get to the Portal. To do this we need to modify DNS or
  <filename>/etc/hosts</filename> so <literal>demo.forgerock.com</literal>
  points to the IP address of the host running OpenIG. If you are using
  <filename>/etc/hosts</filename> be sure to check that the naming services
  for your host check checking files before DNS. On UNIX systems this is
  configured in <filename>/etc/nsswitch.conf</filename>. Assuming OpenIG
  is running on 10.0.1.1, the <filename>/etc/hosts</filename> entry should be
  the following:</para>

  <literallayout class="monospaced">10.0.1.1   demo.forgerock.com</literallayout>
 </section>

 <section>
  <title>Configuring OpenIG &amp; Trying It Out</title>

  <para>Download the <link
  xlink:href="http://openig.forgerock.org/MediaWikiLogin.json"
  >MediaWikiLogin.json</link> file.</para>

  <para>Copy <filename>MediaWikiLogin.json</filename> to
  <filename>$HOME/.ForgeRock/OpenIG/config.json</filename>. By default, OpenIG
  looks for <filename>$HOME/.ForgeRock/OpenIG/config.json</filename> for its
  configuration. You must restart the OpenIG container when making any change
  to the configuration file.</para>

  <screen>$ cp $HOME/forgerock-sample-configs/MediaWikiLogin.json
 $HOME/.ForgeRock/OpenIG/config.json
$ jetty.sh restart</screen>

  <para>To try out the first sample browse to <link xlink:show="new"
  xlink:href="http://demo.forgerock.com:8181/mediawiki"
  >http://demo.forgerock.com:8181/mediawiki</link>. As OpenIG is in pure
  proxy mode, you see all pages in the application as if you were directly
  connecting to it. You can verify this by stopping OpenIG and trying to
  connect to the application. After clearing out your browser cache this should
  result in a 404 Error. If you are still able to see the Wiki, you have not
  properly set up your DNS or host files.</para>

  <para>Next you can click on the <link xlink:show="new"
  xlink:href="http://demo.forgerock.com:8181/mediawiki/index.php?title=Special:UserLogin&amp;type=signup&amp;returnto=Mediawiki/"
  >create user link</link> to register your own username and password. This
  is an optional step since we have a test user, <literal>george</literal>,
  already created.</para>

  <para>To see what is happening behind the scenes, take a look at
  <filename>$HOME/.ForgeRock/OpenIG/config.json</filename>. Look for the
  HandlerServlet. This is the servlet entry point to OpenIG. The HandlerServlet
  passes the request off to another handler which may be a chain of filters
  and handlers. In the pure proxy case there is no special logic to execute so
  it hands off to the OutgoingChain, which in turn calls the ClientHandler.
  The job of the ClientHandler is to send the request on to the target. Since
  there are no chains called before the ClientHandler, the request passes
  through to the target untouched.</para>
 </section>

 <section>
  <title>Modifying the Configuration For User Login</title>

  <para>Next you add a Chain to the configuration to intercept the login page
  and POST a login form to the Wiki. The only modification you must make is to
  replace the OutgoingChain with the DispatchHandler in the HandlerServlet's
  handler attribute. Once you have done that, restart OpenIG.</para>

  <para>Now browse to <link xlink:show="new"
  xlink:href="http://demo.forgerock.com:8181/mediawiki"
  >http://demo.forgerock.com:8181/mediawiki</link> and click the login link.
  You should be logged in as the user <literal>george</literal>. OpenIG has
  intercepted the login page, created the login form with the username
  <literal>george</literal> and password <literal>bosco</literal>, and POSTed
  the login form to the Wiki. If you created your own user in the previous step,
  you can replace the user name and password in the WikiLoginRequestFilter
  with your own. In a real deployment, the credentials might come from a
  database, directory, flat file, HTTP headers, SAML assertion, an Access
  Management agent, or OpenIG itself in simple single sign-on mode. All of
  these are supported through various OpenIG filters and can be seen in other
  samples.</para>

  <para>Behind the scenes, with the change you made to the configuration, the
  HandlerServlet is now calling the DispatchHandler instead of the
  OutgoingChain. The DispatchHandler has a condition which checks for the
  presence of the Wiki login page parameters in the URI path. If the condition
  is false (no login page), the ClientHandler is called sending the request on
  to the Portal with no further processing. If the condition is true, OpenIG
  has found the login page, and calls the WikiLoginSequence for further
  processing. If this were a simple POST of login credentials, there would be a
  single filter to create and POST the login form. Since MediaWiki requires a
  hidden value from the login page to be included in the login form, OpenIG
  must send the request for the login page in order to get the hidden value
  from the response. This is accomplished by using a SequenceHandler which
  calls successive handlers, the first being the WikiExtractNonceChain, which
  extracts the hidden value from the login page, the second being
  WikiLoginChain, which creates and POSTs the form to the Wiki.</para>
 </section>
</chapter>
