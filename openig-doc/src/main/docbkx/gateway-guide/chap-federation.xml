<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START
  !
  ! This work is licensed under the Creative Commons
  ! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  ! To view a copy of this license, visit
  ! http://creativecommons.org/licenses/by-nc-nd/3.0/
  ! or send a letter to Creative Commons, 444 Castro Street,
  ! Suite 900, Mountain View, California, 94041, USA.
  !
  ! You can also obtain a copy of the license at
  ! src/main/resources/legal-notices/CC-BY-NC-ND.txt.
  ! See the License for the specific language governing permissions
  ! and limitations under the License.
  !
  ! If applicable, add the following below this CCPL HEADER, with the fields
  ! enclosed by brackets "[]" replaced with your own identifying information:
  !      Portions Copyright [yyyy] [name of copyright owner]
  !
  ! CCPL HEADER END
  !
  !      Copyright 2011-2014 ForgeRock AS
  !    
-->
<chapter xml:id='chap-federation'
 xmlns='http://docbook.org/ns/docbook'
 version='5.0' xml:lang='en'
 xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
 xsi:schemaLocation='http://docbook.org/ns/docbook
                     http://docbook.org/xml/5.0/xsd/docbook.xsd'
 xmlns:xlink='http://www.w3.org/1999/xlink'>
 <title>Using ${projectName} Federation</title>

 <para>
  The Federation component of ${projectName} is
  a standards based authentication service used by ${projectName}
  to validate a user and retrieve key attributes of the user
  in order to log them in to applications that ${projectName} protects.
  The Federation component implements Security Assertion Markup Language 2.0.
 </para>

 <para>
  Security Assertion Markup Language (SAML) 2.0 is a standard
  for exchanging security information across organizational boundaries.
  SAML 2.0 enables web single sign-on (SSO), for example,
  where the service managing the user's identity
  does not necessarily belong to the same organization
  and does not necessarily use the same software
  as the service that the user wants to access.
 </para>

 <para>
  In SAML 2.0, the service managing the user's identity
  is called the <firstterm>Identity Provider</firstterm> (IDP).
  The service that the user wants to access
  is called the <firstterm>Service Provider</firstterm> (SP).
  Provider organizations agree on the security information they want to exchange,
  and then they mutually configure access to each others' services,
  so that the SAML 2.0 federation capability is ready for use.
  The group of providers sets up a <firstterm>circle of trust</firstterm>,
  which is a list of services participating in the federation.
  In order to be able to configure access to services in the circle of trust,
  the providers share SAML 2.0 <firstterm>metadata</firstterm>
  describing their services in an XML format defined by the SAML 2.0 standard.
 </para>

 <para>
  ${projectName} plays the role of SAML 2.0 SP.
  You must therefore configure ${projectName} as SP to access IDP services
  in order for the Federation component to be operational.
 </para>

 <para>
  For SAML 2.0 web SSO, the user authenticates with the IDP.
  This can start either with the user visiting the IDP site and logging in,
  or with the user visiting the SP site and being directed to the IDP to log in.
  On successful authentication, the IDP sends
  an assertion statement about the authentication to the SP.
  This assertion statement attests which user the IDP authenticated,
  when the authentication succeeded, how long the assertion is valid, and so forth.
  It can optionally contain attribute values for the user who authenticated.
  (${projectName} can then, for example, use the attribute values
  to log a user into a protected application.)
  The assertion can optionally be signed and encrypted.
 </para>

 <orderedlist>
  <para>
   There are two ways that the ${projectName} federation component can be invoked:
  </para>

  <listitem>
   <para>
    IDP initiated SSO,
    where the remote Identity Provider sends
    an unsolicited authentication statement to ${projectName}
   </para>
  </listitem>

  <listitem>
   <para>
    SP initiated SSO,
    where ${projectName} calls the Federation component to
    initiate federated SSO with the Identity Provider
   </para>
  </listitem>
 </orderedlist>

 <para>
  In both cases, the job of the Federation component is
  to validate the user
  and to pass the required attributes to ${projectName}
  so that it can log the user into protected applications.
 </para>

 <para>
  See the
  <link
   xlink:show="new"
   xlink:href="gateway-guide#chap-federation-tutorial"
   xlink:role="http://docbook.org/xlink/role/olink"
  ><citetitle>Tutorial For ${projectName} Federation</citetitle></link>
  in order to try this out with OpenAM playing the role of Identity Provider.
 </para>

 <section xml:id="federation-installation">
  <title>Installation Overview</title>

 <indexterm>
  <primary>Installation</primary>
  <secondary>Federation</secondary>
 </indexterm>

  <itemizedlist>
   <para>
    This section summarizes the steps needed to prepare ${projectName}
    to act as a SAML 2.0 SP for your target application.
   </para>

   <listitem>
    <para>
     Install the ${projectName} war file.
    </para>
   </listitem>

   <listitem>
    <para>
     Configure ${projectName} to proxy successfully, and even log a user in,
     to the target application.
     Getting this to work before configuring Federation
     makes the process much simpler to troubleshoot if anything goes wrong.
    </para>
   </listitem>

   <listitem>
    <para>
     Add Federation configuration to the ${projectName} configuration.
    </para>
   </listitem>

   <listitem>
    <para>
     Include the assertion mapping, redirect URI,
     and any optional configuration settings you choose
     in the Federation configuration.
    </para>
   </listitem>

   <listitem>
    <para>
     Export the Identity Provider metadata from the remote IDP,
     or use the metadata from an OpenAM-generated Fedlet.
     (An OpenAM Fedlet is a small web application that can act as SP.)
    </para>
   </listitem>

   <listitem>
    <para>
     Import ${projectName} metadata to your Identity Provider.
    </para>
   </listitem>
  </itemizedlist>
 </section>

 <section xml:id="federation-configuration-files">
  <title>Configuration File Overview</title>

 <indexterm>
  <primary>Configuration</primary>
  <secondary>Federation</secondary>
 </indexterm>

  <para>
   You configure the Federation component by modifying
   both the ${projectName} <filename>config.json</filename> file
   and also by including Federation-specific XML files with the configuration.
  </para>

  <itemizedlist>
   <para>
    The location of configuration information depends on
    the operating system where ${projectName} runs,
    and on the user who runs the application server where ${projectName} runs.
   </para>

   <listitem>
    <para>
     On UNIX, Linux, and similar systems,
     where this user's home directory is referred to as <filename>$HOME</filename>,
     by default the Federation component looks
     in <filename>${warConfigDir}</filename> for <filename>config.json</filename>
     and in <filename>${warSamlDir}</filename> for the Federation XML configuration.
    </para>
   </listitem>

   <listitem>
    <para>
     On Windows, by default the Federation component looks
     in <filename>${windowsWarConfigDir}</filename>,
     and in <filename>${windowsWarSamlDir}</filename>.
     To locate the <filename>%appdata%</filename> folder for your version of Windows,
     open Windows Explorer,
     type <literal>%appdata%</literal> as the file path,
     and press Enter.
     You must create
     the <filename>${windowsWarConfigDir}</filename>
     and <filename>${windowsWarSamlDir}</filename> folders,
     and then copy the configuration files into the folders.
    </para>
   </listitem>
  </itemizedlist>

  <variablelist>
   <para>The following is a description of the files:</para>

   <varlistentry>
    <term><filename>${warConfigDir}/config.json</filename></term>
    <listitem>
     <para>
      This is the core configuration file for ${projectName},
      where you configure a
      <link
       xlink:show="new"
       xlink:href="reference#SamlFederationHandler"
       xlink:role="http://docbook.org/xlink/role/olink"
      >SamlFederationHandler</link>.
      If this file uses a
      <link
       xlink:show="new"
       xlink:href="reference#Router"
       xlink:role="http://docbook.org/xlink/role/olink"
      >Router</link>, you can configure the handler in a route file.
     </para>

     <para>
      You must configure both the ${projectName} core configuration,
      and also the XML files specific to the Federation component.
      The reason there are two sets of configuration files
      is that the Federation component includes a federation library from OpenAM.
     </para>

     <para>
      In order to configure the Federation component you must tag swap the XML files.
      If you are familiar with the workflow in the OpenAM console
      you can instead generate a Fedlet and directly copy the configuration files
      into <filename>${warSamlDir}</filename>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><filename>${warSamlDir}/FederationConfig.properties</filename></term>
    <listitem>
     <para>
      Advanced features of the federation library from OpenAM.
      The defaults suffice in most deployments.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><filename>${warSamlDir}/fedlet.cot</filename></term>
    <listitem>
     <para>
      Circle of trust for ${projectName} and the Identity Provider.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><filename>${warSamlDir}/idp.xml</filename></term>
    <listitem>
     <para>
      This metadata file is generated by the Identity Provider.
      You must copy the generated metadata file into the configuration directory.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><filename>${warSamlDir}/idp-extended.xml</filename></term>
    <listitem>
     <para>
      Standard metadata extensions generated by the Identity Provider.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><filename>${warSamlDir}/sp.xml</filename></term>
    <term><filename>${warSamlDir}/sp-extended.xml</filename></term>
    <listitem>
     <para>
      These are the standard metadata and metadata extensions
      for the ${projectName} Federation component.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </section>

 <section xml:id="federation-configuration">
  <title>Configuring the Federation Handler</title>

  <indexterm>
   <primary>Configuration</primary>
   <secondary>Federation</secondary>
  </indexterm>

  <para>
   The simplest way to configure the Federation component
   is to use the OpenAM task wizard to generate a Fedlet,
   and then copy the Fedlet configuration files to the correct locations.
   If you use the Fedlet configuration files,
   simply unpack <filename>Fedlet.war</filename>
   and copy all the files listed above into <filename>${warSamlDir}</filename>.
   You do not have to modify the files
   to do basic IDP and SP initiated SSO with ${projectName}.
   When generating a Fedlet,
   know that the sample <filename>config.json</filename> templates
   uses <literal>/saml</literal> as the URI
   so your Fedlet end point should be specified as
   <literal><replaceable>protocol</replaceable>://<replaceable
    >host</replaceable>.<replaceable>domain</replaceable>:<replaceable
    >port</replaceable>/saml</literal>.
  </para>

  <para>
   If you do not use the Fedlet wizard,
   edit the configuration files for the unconfigured Fedlet,
   and then copy the Fedlet configuration files
   to the <filename>${warSamlDir}</filename> directory.
   You must still nevertheless get the metadata from the IDP,
   and then copy it to <filename>idp.xml</filename> in the same directory.
  </para>

  <para>
   Once you have the Fedlet configuration files set up, add the
   <link
    xlink:show="new"
    xlink:href="reference#SamlFederationHandler"
    xlink:role="http://docbook.org/xlink/role/olink"
   >SamlFederationHandler</link> object to the ${projectName} configuration.
  </para>
 </section>

 <section xml:id="federation-example-settings">
  <title>Example Settings</title>

  <para>
   Application <literal>myportal</literal> requires a form
   with username and password for login.
   The username for <literal>myportal</literal>
   is the <literal>mail</literal> attribute at the user's Identity Provider.
   The password for <literal>myportal</literal>
   is the <literal>mailPassword</literal> attribute at the Identity Provider.
  </para>

  <para>
   The incoming SAML2 assertion sent by the Identity Provider contains
   the <literal>mail</literal> and <literal>mailPassword</literal> attributes.
   The Federation component validates the incoming assertion,
   sets the session attributes
   <literal>username</literal> and <literal>password</literal>
   to the values of
   <literal>mail</literal> and <literal>mailPassword</literal>
   from the assertion attributes,
   and redirects the user to <literal>/myportal/login</literal>.
   A "LoginRequest" filter then retrieves the credentials
   and creates the form to log the user in to <literal>myportal</literal>.
  </para>

  <para>
   The "SamlFederationHandler" configuration object looks like this:
  </para>

  <programlisting language="javascript">
{
    "name": "SamlFederationHandler",
    "type": "org.forgerock.openig.saml.SamlFederationHandler",
    "config": {
        "assertionMapping": {
            "username": "mail",
            "password": "mailPassword"
        },
        "redirectURI": "/myportal/login",
        "logoutURI": "/myportal/logout"
    }
}
  </programlisting>

  <para>
   The "LoginRequest" configuration object looks like this:
  </para>

  <programlisting language="javascript">
{
    "name": "LoginRequest",
    "type": "StaticRequestFilter",
    "config": {
        "method": "POST",
        "uri": "https://www.myportal.com/myportal/login",
        "form": {
            "username": [
                "${exchange.session.username}"
            ],
            "password": [
                "${exchange.session.password}"
            ]
        }
    }
}
  </programlisting>
 </section>

 <section xml:id="federation-idp-metadata">
  <title>Identity Provider Metadata</title>

  <para>
   The Identity Provider metadata must be copied to
   the <filename>${warSamlDir}/idp.xml</filename> directory.
   See the documentation for your Identity Provider
   for instructions on how to get the metadata.
  </para>

  <para>
   To export Identity Provider metadata from OpenAM,
   either save the response from the appropriate end point,
   such as <literal>http://openam.example.com:8088/openam/saml2/jsp/exportmetadata.jsp</literal>,
   or run an <command>ssoadm</command> command such as the following:
  </para>

  <screen>
$ <userinput>ssoadm \
 export-entity \
 --adminid amadmin \
 --password-file /tmp/pwd.txt \
 --entityid http://openam.example.com:8088/openam \
 --meta-data-file /tmp/idp.xml</userinput>
  </screen>
 </section>
</chapter>
