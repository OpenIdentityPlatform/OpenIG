<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START
  !
  ! This work is licensed under the Creative Commons
  ! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  ! To view a copy of this license, visit
  ! http://creativecommons.org/licenses/by-nc-nd/3.0/
  ! or send a letter to Creative Commons, 444 Castro Street,
  ! Suite 900, Mountain View, California, 94041, USA.
  !
  ! You can also obtain a copy of the license at
  ! src/main/resources/legal-notices/CC-BY-NC-ND.txt.
  ! See the License for the specific language governing permissions
  ! and limitations under the License.
  !
  ! If applicable, add the following below this CCPL HEADER, with the fields
  ! enclosed by brackets "[]" replaced with your own identifying information:
  !      Portions Copyright [yyyy] [name of copyright owner]
  !
  ! CCPL HEADER END
  !
  !      Copyright 2011-2014 ForgeRock AS
  !    
-->
<chapter xml:id='chap-install'
 xmlns='http://docbook.org/ns/docbook'
 version='5.0' xml:lang='en'
 xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
 xsi:schemaLocation='http://docbook.org/ns/docbook
                     http://docbook.org/xml/5.0/xsd/docbook.xsd'
 xmlns:xlink='http://www.w3.org/1999/xlink'
 xmlns:xinclude='http://www.w3.org/2001/XInclude'>
 <title>Installation in Detail</title>

 <para>
  This chapter covers more advanced installation procedures.
 </para>

 <indexterm>
  <primary>Installation</primary>
 </indexterm>

 <itemizedlist>
  <listitem>
   <para>
    Make sure you have a supported Java version installed.
   </para>

   <para>
    See the <citetitle>Release Notes</citetitle> section,
    <link
     xlink:show="new"
     xlink:href="release-notes#java-requirements"
     xlink:role="http://docbook.org/xlink/role/olink"
    ><citetitle>JDK Version</citetitle></link>, for details.
   </para>
  </listitem>

  <listitem>
   <para>
    Prepare a deployment container.
   </para>

   <para>
    For details, see <xref linkend="configure-container" />.
   </para>
  </listitem>

  <listitem>
   <para>
    Prepare the network to use ${projectName} as a reverse proxy.
   </para>

   <para>
    For details, see <xref linkend="configure-network" />.
   </para>
  </listitem>

  <listitem>
   <para>
    Download, deploy, and configure ${projectName}.
   </para>

   <para>
    For details, see <xref linkend="install" />.
   </para>
  </listitem>
 </itemizedlist>

 <section xml:id="configure-container">
  <title>Configuring Deployment Containers</title>

  <para>
   This section provides installation and configuration tips
   that you need to run ${projectName} in supported containers.
  </para>

  <para>
   For the full list of supported containers,
   see the <citetitle>Release Notes</citetitle> section,
   <link
    xlink:show="new"
    xlink:href="release-notes#which-container"
    xlink:role="http://docbook.org/xlink/role/olink"
   ><citetitle>Web Application Containers</citetitle></link>.
  </para>

  <para>
   For further information on advanced configuration for a particular container,
   see the container documentation.
  </para>

  <section xml:id="about-securing-connections">
   <title>About Securing Connections</title>

   <para>
    ${projectName} is often deployed to replay credentials
    or other security information.
    In a real world deployment,
    that information must be communicated over a secure connection using HTTPS,
    meaning in effect HTTP over encrypted Transport Layer Security (TLS).
    Never send real credentials, bearer tokens, or other security information
    unprotected over HTTP.
   </para>

   <para>
    When ${projectName} is acting as a server,
    the web application container where ${projectName} runs
    is responsible for setting up TLS connections
    with client applications that connect to ${projectName}.
    For details, see <xref linkend="jetty-https" />
    or <xref linkend="tomcat-https" />.
   </para>

   <para>
    When ${projectName} is acting as a client, the
    <link
     xlink:show="new"
     xlink:href="reference#HttpClient"
     xlink:role="http://docbook.org/xlink/role/olink"
    >HttpClient</link> configuration sets up TLS connections
    from ${projectName} to other servers.
    For details, see <xref linkend="client-side-security" />.
   </para>

   <para>
    TLS depends on the use of digital certificates (public keys).
    In typical use of TLS,
    the client authenticates the server by its X.509 digital certificate
    as the first step to establishing communication.
    Once trust is established,
    then the client and server can set up
    a symmetric key to encrypt communications.
   </para>

   <para>
    In order for the client to trust the server certificate,
    the client needs first to trust
    the certificate of the party who signed the server's certificate.
    This means that either the client
    has a trusted copy of the signer's certificate,
    or the client has a trusted copy
    of the certificate of the party who signed the signer's certificate.
   </para>

   <para>
    Certificate Authorities (CAs) are trusted signers
    with well-known certificates.
    Browsers generally ship with many well-known CA certificates.
    Java distributions also ship with many well-known CA certificates.
    Getting a certificate signed by a well-known CA generally costs money.
   </para>

   <para>
    It is also possible for you to self-sign certificates.
    The trade off is that although you do not have to pay any money,
    the certificate is not trusted by any clients until they have a copy.
    Whereas it is often enough
    to install a certificate signed by a well-known CA
    in the server key store as the basis of trust for HTTPS connections,
    self-signed certificates must also be installed in all clients.
   </para>

   <para>
    Like self-signed certificates,
    the signing certificates of less well-known CAs
    are also unlikely to be found in the default trust store.
    You might therefore need to install those signing certificates
    on the client side as well.
   </para>

   <para>
    This guide describes how to install self-signed certificates,
    which are certainly fine for trying out the software
    and okay for deployments where you manage all clients
    that access ${projectName}.
    If you need a well-known CA signed certificate instead,
    see the documentation for your container for details
    on requesting a CA signature and installing the CA signed certificate.
   </para>

   <para>
    Once certificates are properly installed to allow client-server trust,
    also consider the cipher suites configured for use.
    The cipher suite used determines the security settings for the communication.
    Initial TLS negotiations bring the client and server to agreement on which
    cipher suite to use.
    Basically the client and server share their preferred cipher suites
    to compare and to choose.
    If you therefore have a preference concerning the cipher suites to use,
    you must set up your container to use only your preferred cipher suites.
    Otherwise the container is likely to inherit the list of cipher suites
    from the underlying Java environment.
   </para>

   <para>
    The Java Secure Socket Extension (JSSE), part of the Java environment,
    provides security services that ${projectName} uses to secure connections.
    You can set security and system properties to configure the JSSE.
    For a list of properties you can use to customize the JSSE in Oracle Java,
    see the <citetitle>Customization</citetitle> section of the
    <link
     xlink:href="http://docs.oracle.com/javase/7/docs/technotes/guides/security/jsse/JSSERefGuide.html#Customization"
     xlink:show="new"
    ><citetitle>JSSE Reference Guide</citetitle></link>.
   </para>
  </section>

  <section xml:id="tomcat">
   <title>Configuring Apache Tomcat For ${projectName}</title>

   <para>
    This section describes essential Apache Tomcat configuration
    that you need in order to run ${projectName}.
   </para>

   <indexterm>
    <primary>Containers</primary>
    <secondary>Tomcat</secondary>
   </indexterm>

   <para>
    Download and install a supported version of Apache Tomcat from
    <link xlink:show="new" xlink:href="http://tomcat.apache.org/" />.
   </para>

   <para>
    Configure Tomcat to use the same protocol
    as the application you are protecting with ${projectName}.
    If the protected application is on a remote system,
    configure Tomcat to use the same port as well.
    If your application listens on both an HTTP and an HTTPS port,
    then you must configure Tomcat to do so as well.
   </para>

   <para>
    To configure Tomcat to use an HTTP port other than 8080,
    modify the defaults in <filename>/path/to/tomcat/conf/server.xml</filename>.
    Search for the default value of 8080 and replace it with the new port number.
   </para>

   <section xml:id="tomcat-cookie-domains">
    <title>Configuring Tomcat Cookie Domains</title>

    <para>
     If you use ${projectName} for more than a single protected application
     and the protected applications are on different hosts,
     then you must configure Tomcat to set domain cookies.
     To do this, add a session cookie domain context element
     that specifies the domain to
     <filename>/path/to/conf/Catalina/<replaceable>server</replaceable>/root.xml</filename>,
     as in the following example.
    </para>

    <programlisting language="xml">
<xinclude:include href="resources/tomcat-cookie-domains-xml.txt" parse="text">
 <xinclude:fallback>Failed to include session cookie domain configuration</xinclude:fallback>
</xinclude:include>
    </programlisting>

    <para>
     Restart Tomcat to read the configuration changes.
    </para>
   </section>

   <section xml:id="tomcat-https">
    <title>Configuring Tomcat For HTTPS (Server-Side)</title>

    <para>
     To get Tomcat up quickly on an SSL port
     add an entry similar to the following in
     <filename>/path/to/tomcat/conf/server.xml</filename>.
    </para>

    <programlisting language="xml">
<xinclude:include href="resources/tomcat-https-xml.txt" parse="text">
 <xinclude:fallback>Failed to include HTTPS configuration</xinclude:fallback>
</xinclude:include>
    </programlisting>

    <para>
     Also create a key store holding a self-signed certificate.
    </para>

    <screen>
$ <userinput>keytool \
 -genkey \
 -alias tomcat \
 -keyalg RSA \
 -keystore /path/to/tomcat/conf/keystore \
 -storepass password \
 -keypass password \
 -dname "CN=openig.example.com,O=Example Corp,C=FR"</userinput>
    </screen>

    <para>
     Notice the key store file location and the key store password
     both match the configuration.
     By default, Tomcat looks for a certificate with alias <literal>tomcat</literal>.
    </para>

    <para>
     Restart Tomcat to read the configuration changes.
    </para>

    <para>
     Browsers generally do not trust self-signed certificates.
     To work with a certificate signed instead by a trusted CA,
     see the Apache Tomcat documentation on configuring HTTPS.
    </para>
   </section>

   <section xml:id="tomcat-mysql">
    <title>Configuring Tomcat to Access MySQL Over JNDI</title>

    <para>
     If ${projectName} accesses an SQL database,
     then you must configure Apache Tomcat to access the database over JNDI.
     To do so, you must add the driver jar for the database,
     set up a JNDI data source, and set up a reference to that data source.
    </para>

    <orderedlist>
     <para>
      The following steps are for MySQL Connector/J.
     </para>

     <listitem>
      <para>
       Download the MySQL JDBC Driver Connector/J from
       <link xlink:show="new" xlink:href="http://dev.mysql.com/downloads/connector/j" />.
      </para>
     </listitem>

     <listitem>
      <para>
       Copy the driver .jar to <filename>/path/to/tomcat/lib/</filename>
       so that it is on Tomcat's class path.
      </para>
     </listitem>

     <listitem>
      <para>
       Add a JNDI data source for your MySQL server and database in
       <filename>/path/to/tomcat/conf/context.xml</filename>.
      </para>

      <programlisting language="xml">
<xinclude:include href="resources/tomcat-data-source-xml.txt" parse="text">
 <xinclude:fallback>Failed to include data source configuration</xinclude:fallback>
</xinclude:include>
      </programlisting>
     </listitem>

     <listitem>
      <para>
       Add a resource reference to the data source in
       <filename>/path/to/tomcat/conf/web.xml</filename>.
      </para>

      <programlisting language="xml">
<xinclude:include href="resources/tomcat-resource-ref-xml.txt" parse="text">
 <xinclude:fallback>Failed to include resource ref configuration</xinclude:fallback>
</xinclude:include>
      </programlisting>
     </listitem>

     <listitem>
      <para>
       Restart Tomcat to read the configuration changes.
      </para>
     </listitem>
    </orderedlist>
   </section>
  </section>

  <section xml:id="jetty">
   <title>Configuring Jetty For ${projectName}</title>

   <para>
    This section describes essential Jetty configuration
    that you need in order to run ${projectName}.
   </para>

   <indexterm>
    <primary>Containers</primary>
    <secondary>Jetty</secondary>
   </indexterm>

   <para>
    Download and install a supported version of Jetty from
    <link xlink:show="new" xlink:href="http://download.eclipse.org/jetty/" />.
   </para>

   <para>
    Configure Jetty to use the same protocol
    as the application you are protecting with ${projectName}.
    If the protected application is on a remote system,
    configure Jetty to use the same port as well.
    If your application listens on both an HTTP and an HTTPS port,
    then you must configure Jetty to do so as well.
   </para>

   <para>
    To configure Jetty to use an HTTP port other than 8080,
    modify the defaults in <filename>/path/to/jetty/etc/jetty.xml</filename>.
    Search for the default value of 8080 and replace it with the new port number.
   </para>

   <section xml:id="jetty-cookie-domains">
    <title>Configuring Jetty Cookie Domains</title>

    <para>
     If you use ${projectName} for more than a single protected application
     and the protected applications are on different hosts,
     then you must configure Jetty to set domain cookies.
     To do this, add a session domain handler element
     that specifies the domain to
     <filename>/path/to/jetty/etc/jetty.xml</filename>,
     as in the following example.
    </para>

    <programlisting language="xml">
<xinclude:include href="resources/jetty-cookie-domains-xml.txt" parse="text">
 <xinclude:fallback>Failed to include session domain handler configuration</xinclude:fallback>
</xinclude:include>
    </programlisting>

    <para>
     Restart Jetty to read the configuration changes.
    </para>
   </section>

  <section xml:id="jetty-https">
   <title>Configuring Jetty For HTTPS (Server-Side)</title>

   <para>
    To get Jetty up quickly on an SSL port, follow the steps in this section.
   </para>

   <para>
    These steps involve replacing the built-in key store with your own.
   </para>

   <procedure>
    <step>
     <para>
      If you have not done so already, remove the built-in key store.
     </para>

     <screen>
$ <userinput>rm /path/to/jetty/etc/keystore</userinput>
     </screen>
    </step>

    <step>
     <para>
      Generate a new key pair with self-signed certificate in the key store.
     </para>

     <screen>
$ <userinput>keytool \
 -genkey \
 -alias jetty \
 -keyalg RSA \
 -keystore /path/to/jetty/etc/keystore \
 -storepass password \
 -keypass password \
 -dname "CN=openig.example.com,O=Example Corp,C=FR"</userinput>
     </screen>
    </step>

    <step>
     <para>
      Find the obfuscated form of the password.
     </para>

     <screen>
$ <userinput>java \
 -cp /path/to/jetty/lib/jetty-util-*.jar \
 org.eclipse.jetty.util.security.Password \
 password</userinput>
<computeroutput>password
OBF:1v2j1uum1xtv1zej1zer1xtn1uvk1v1v
MD5:5f4dcc3b5aa765d61d8327deb882cf99</computeroutput>
     </screen>
    </step>

    <step>
     <para>
      Edit the SSL Context Factory entry in the Jetty configuration file,
      <filename>/path/to/jetty/etc/jetty-ssl.xml</filename>.
     </para>

   <programlisting language="xml">
<xinclude:include href="resources/jetty-https-xml.txt" parse="text">
 <xinclude:fallback>Failed to include HTTPS configuration</xinclude:fallback>
</xinclude:include>
   </programlisting>
    </step>

    <step>
     <para>
      Uncomment the line specifying that configuration file in
      <filename>/path/to/jetty/start.ini</filename>.
     </para>

     <programlisting language="ini">
etc/jetty-ssl.xml
     </programlisting>
    </step>

    <step>
     <para>
      Restart Jetty.
     </para>
    </step>

    <step>
     <para>
      Browse <link xlink:show="new" xlink:href="https://www.example.com:8443" />.
     </para>

     <para>
      You should see a warning in the browser
      that the (self-signed) certificate is not recognized.
     </para>
    </step>
   </procedure>
  </section>

   <section xml:id="jetty-mysql">
    <title>Configuring Jetty to Access MySQL Over JNDI</title>

    <para>
     If ${projectName} accesses an SQL database,
     then you must configure Jetty to access the database over JNDI.
     To do so, you must add the driver jar for the database,
     set up a JNDI data source, and set up a reference to that data source.
    </para>

    <orderedlist>
     <para>
      The following steps are for MySQL Connector/J.
     </para>

     <listitem>
      <para>
       Download the MySQL JDBC Driver Connector/J from
       <link xlink:show="new" xlink:href="http://dev.mysql.com/downloads/connector/j" />.
      </para>
     </listitem>

     <listitem>
      <para>
       Copy the driver .jar to <filename>/path/to/jetty/lib/jndi/</filename>
       so that it is on Jetty's class path.
      </para>
     </listitem>

     <listitem>
      <para>
       Add a JNDI data source for your MySQL server and database in
       <filename>/path/to/jetty/etc/jetty.xml</filename>.
      </para>

      <programlisting language="xml">
<xinclude:include href="resources/jetty-data-source-xml.txt" parse="text">
 <xinclude:fallback>Failed to include data source configuration</xinclude:fallback>
</xinclude:include>
      </programlisting>
     </listitem>

     <listitem>
      <para>
       Add a resource reference to the data source in
       <filename>/path/to/jetty/etc/webdefault.xml</filename>.
      </para>

      <programlisting language="xml">
<xinclude:include href="resources/jetty-resource-ref-xml.txt" parse="text">
 <xinclude:fallback>Failed to include resource ref configuration</xinclude:fallback>
</xinclude:include>
      </programlisting>
     </listitem>

     <listitem>
      <para>
       Restart Jetty to read the configuration changes.
      </para>
     </listitem>
    </orderedlist>
   </section>
  </section>
 </section>

 <section xml:id="configure-network">
  <title>Preparing the Network</title>

  <para>
   In order for ${projectName} to function as a reverse proxy,
   browsers attempting to access the protected application
   must go through ${projectName} instead.
  </para>

  <para>
   Modify DNS or host file settings so that
   the host name of the protected application
   resolves to the IP address of ${projectName}
   on the system where the browser runs.
  </para>

  <para>
   Restart the browser after making this change.
  </para>
 </section>

 <section xml:id="install">
  <title>Installing ${projectName}</title>

  <procedure>
   <para>
    Follow these steps to install ${projectName}.
   </para>

   <step>
    <para>
     Download the ${projectName}.
    </para>

    <itemizedlist>
     <para>
      ${projectName} can be downloaded from these locations.
     </para>

     <listitem>
      <para>
       The
       <link
        xlink:show="new"
        xlink:href="http://forgerock.com/download-stack/"
       >Enterprise Software Downloads</link> page
       provides thoroughly validated release builds
       for ForgeRock customers who run ${projectName} in production deployments,
       and for those who want to try or test with release builds.
      </para>

      <para>
       Use this build with officially released project documentation from
       <link xlink:show="new" xlink:href="http://docs.forgerock.org/" />.
      </para>

      <para>
       Make sure you review and agree with
       the Software License and Subscription Agreement
       in order to use the software.
      </para>
     </listitem>

     <listitem>
      <para>
       The
       <link
        xlink:show="new"
        xlink:href="http://forgerock.org/downloads/openig-builds/"
       >Nightly Builds</link> page
       offers the very latest successful nightly build of the latest code.
      </para>

      <para>
       Use this build to get a preview of the latest features and fixes,
       when reading along with the draft documentation.
      </para>
     </listitem>

     <listitem>
      <para>
       The
       <link
        xlink:show="new"
        xlink:href="http://forgerock.org/downloads/openig-archive/"
       >Archive</link> page
       makes older builds available.
      </para>
     </listitem>
    </itemizedlist>
   </step>

   <step>
    <para>
     Deploy the ${projectName} war file <emphasis>to the root context</emphasis>
     of the web application container.
    </para>

    <para>
     ${projectName} must be deployed to the root context, not below.
    </para>
   </step>

   <step>
    <para>
     Prepare your ${projectName} configuration files.
    </para>

    <variablelist>
     <para>
      By default, ${projectName} files are located under
      <filename>${warBase}</filename> on Linux, Mac OS X, and UNIX systems,
      and <filename>${windowsWarBase}</filename> on Windows systems.
      ${projectName} uses the following file system directories.
     </para>

     <varlistentry>
      <term><filename>${warConfigDir}</filename></term>
      <term><filename>${windowsWarConfigDir}</filename></term>
      <listitem>
       <para>
        ${projectName} configuration files,
        where the main configuration file is <filename>config.json</filename>.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><filename>${warRoutesDir}</filename></term>
      <term><filename>${windowsWarRoutesDir}</filename></term>
      <listitem>
       <para>
        ${projectName} route configuration files.
       </para>

       <para>
        See the chapter,
        <link
         xlink:show="new"
         xlink:href="gateway-guide#chap-routing"
         xlink:role="http://docbook.org/xlink/role/olink"
        ><citetitle>Configuring Routes</citetitle></link>,
        for more information.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><filename>${warSamlDir}</filename></term>
      <term><filename>${windowsWarSamlDir}</filename></term>
      <listitem>
       <para>
        ${projectName} SAML 2.0 configuration files.
       </para>

       <para>
        See the chapter,
        <link
         xlink:show="new"
         xlink:href="gateway-guide#chap-federation"
         xlink:role="http://docbook.org/xlink/role/olink"
        ><citetitle>Using ${projectName} Federation</citetitle></link>,
        for more information.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><filename>${warGroovyDir}</filename></term>
      <term><filename>${windowsWarGroovyDir}</filename></term>
      <listitem>
       <para>
        ${projectName} script files, for Groovy scripted filters and handlers.
       </para>

       <para>
        See the chapter,
        <link
         xlink:show="new"
         xlink:href="gateway-guide#chap-extending"
         xlink:role="http://docbook.org/xlink/role/olink"
         ><citetitle>Extending ${projectName}</citetitle></link>,
        for more information.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><filename>${warTmpDir}</filename></term>
      <term><filename>${windowsWarTmpDir}</filename></term>
      <listitem>
       <para>
        ${projectName} temporary files.
       </para>

       <para>
        This location can be used for temporary storage.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>

    <itemizedlist>
     <para>
      You can change <filename>${warBase}</filename>
      (or <filename>${windowsWarBase}</filename>)
      from the default location in the following ways.
     </para>

     <listitem>
      <para>
       Unpack the ${projectName} war file,
       and edit the <filename>WEB-INF/web.xml</filename> application descriptor
       to set the <literal>openig-base</literal> initialization parameter
       to the full path to the base location for ${projectName} files,
       as in the following example.
      </para>

      <programlisting language="xml">
<![CDATA[
 <servlet>
   <servlet-name>GatewayServlet</servlet-name>
   <servlet-class>org.forgerock.openig.servlet.GatewayServlet</servlet-class>
   <init-param>
     <param-name>openig-base</param-name>
     <param-value>/path/to/openig</param-value>
   </init-param>
 </servlet>
]]>
      </programlisting>
     </listitem>

     <listitem>
      <para>
       Set the <literal>OPENIG_BASE</literal> environment variable
       to the full path to the base location for ${projectName} files.
      </para>

      <screen>
# On Linux, Mac OS X, and UNIX using Bash
$ <userinput>export OPENIG_BASE=/path/to/openig</userinput>

# On Windows
C:><userinput>set OPENIG_BASE=c:\path\to\openig</userinput>
      </screen>
     </listitem>

     <listitem>
      <para>
       Set the <literal>openig.base</literal> Java system property
       to the full path to the base location for ${projectName} files
       when starting the web application container where ${projectName} runs,
       as in the following example that starts Jetty server in the foreground.
      </para>

      <screen>
$ <userinput>java -Dopenig.base=/path/to/openig -jar start.jar</userinput>
      </screen>
     </listitem>
    </itemizedlist>

    <para>
     If you have not yet prepared configuration files, then start with the
     <link
      xlink:href="gateway-guide#config-proxy-and-capture"
      xlink:role="http://docbook.org/xlink/role/olink"
      xlink:show="new"
     ><citetitle>Configuration for Proxy &amp; Capture</citetitle></link>.
    </para>

    <para>
     Copy the template to <filename>${warConfigDir}/config.json</filename>.
     Replace the "baseURI" of the "DispatchHandler"
     with that of the protected application.
    </para>

    <para>
     On Windows,
     copy the template to <filename>${windowsWarConfigDir}\config.json</filename>.
     To locate the <filename>%appdata%</filename> folder
     for your version of Windows,
     open Windows Explorer,
     type <literal>%appdata%</literal> as the file path,
     and press Enter.
     You must create the <filename>${windowsWarConfigDir}</filename> folder,
     and then add the configuration file.
    </para>
   </step>

   <step>
    <para>
     Start the web container where ${projectName} is deployed.
    </para>
   </step>

   <step>
    <para>
     Browse to the protected application.
    </para>

    <para>
     ${projectName} should now proxy all traffic to the application.
    </para>
   </step>

   <step>
    <para>
     Make sure the browser is going through ${projectName}.
    </para>

    <para>
     Verify this in one of the following ways.
    </para>

    <stepalternatives>
     <step>
      <substeps>
       <step>
        <para>
         Stop the ${projectName} web container.
        </para>
       </step>

       <step>
        <para>
         Verify that you cannot browse to the protected application.
        </para>
       </step>

       <step>
        <para>
         Start the ${projectName} web container.
        </para>
       </step>

       <step>
        <para>
         Verify that you can now browse to the protected application again.
        </para>
       </step>
      </substeps>
     </step>

     <step>
      <para>
       Check the LogSink to see that traffic is going through ${projectName}.
      </para>

      <para>
       The default ConsoleLogSink is the deployment container log.
      </para>
     </step>
    </stepalternatives>
   </step>
  </procedure>
 </section>

 <section xml:id="load-balancing">
  <title>Preparing For Load Balancing &amp; Failover</title>

  <para>
   For a high scale or highly available deployment,
   you can prepare a pool of ${projectName} servers
   with nearly identical configurations,
   and then load balance requests across the pool,
   routing around any servers that become unavailable.
   Load balancing allows the service to handle more load.
  </para>

  <para>
   Before you spread requests across multiple servers, however,
   you must determine what to do with state information
   that ${projectName} saves in the exchange,
   or retrieves locally from the ${projectName} server system.
   If information is retrieved locally,
   then also consider setting up failover
   so that if one server becomes unavailable,
   another server in the pool can take its place.
   The benefit of failover is
   that a server failure can be invisible to client applications.
  </para>

  <itemizedlist>
   <para>
    ${projectName} can save state information in the exchange in several ways.
   </para>

   <listitem>
    <para>
     Handlers including a
     <link
      xlink:href="reference#SamlFederationHandler"
      xlink:role="http://docbook.org/xlink/role/olink"
      xlink:show="new"
     >SamlFederationHandler</link>
     or a custom
     <link
      xlink:href="reference#ScriptableHandler"
      xlink:role="http://docbook.org/xlink/role/olink"
      xlink:show="new"
     >ScriptableHandler</link>
     can store information in the exchange.
     Most handlers depend on information in the exchange,
     some of which is first stored by ${projectName}.
    </para>
   </listitem>

   <listitem>
    <para>
     Filters including those having types
     <link
      xlink:href="reference#AssignmentFilter"
      xlink:role="http://docbook.org/xlink/role/olink"
      xlink:show="new"
     >AssignmentFilter</link>,
     <link
      xlink:href="reference#HeaderFilter"
      xlink:role="http://docbook.org/xlink/role/olink"
      xlink:show="new"
     >HeaderFilter</link>,
     <link
      xlink:href="reference#OAuth2ClientFilter"
      xlink:role="http://docbook.org/xlink/role/olink"
      xlink:show="new"
     >OAuth2ClientFilter</link>,
     <link
      xlink:href="reference#OAuth2ResourceServerFilter"
      xlink:role="http://docbook.org/xlink/role/olink"
      xlink:show="new"
     >OAuth2ResourceServerFilter</link>,
     <link
      xlink:href="reference#ScriptableFilter"
      xlink:role="http://docbook.org/xlink/role/olink"
      xlink:show="new"
     >ScriptableFilter</link>,
     <link
      xlink:href="reference#SqlAttributesFilter"
      xlink:role="http://docbook.org/xlink/role/olink"
      xlink:show="new"
     >SqlAttributesFilter</link>,
     and
     <link
      xlink:href="reference#StaticRequestFilter"
      xlink:role="http://docbook.org/xlink/role/olink"
      xlink:show="new"
     >StaticRequestFilter</link>
     can store information in the exchange.
     Most filters depend on information in the exchange,
     some of which is first stored by ${projectName}.
    </para>
   </listitem>
  </itemizedlist>

  <itemizedlist>
   <para>
    ${projectName} can also retrieve information locally in several ways.
   </para>

   <listitem>
    <para>
     Filters and handlers including
     <link
      xlink:href="reference#FileAttributesFilter"
      xlink:role="http://docbook.org/xlink/role/olink"
      xlink:show="new"
      >FileAttributesFilter</link>,
     <link
      xlink:href="reference#ScriptableFilter"
      xlink:role="http://docbook.org/xlink/role/olink"
      xlink:show="new"
     >ScriptableFilter</link>,
     <link
      xlink:href="reference#ScriptableHandler"
      xlink:role="http://docbook.org/xlink/role/olink"
      xlink:show="new"
     >ScriptableHandler</link>,
     and
     <link
      xlink:href="reference#SqlAttributesFilter"
      xlink:role="http://docbook.org/xlink/role/olink"
      xlink:show="new"
     >SqlAttributesFilter</link>
     can depend on local system files or container configuration.
    </para>
   </listitem>
  </itemizedlist>

  <para>
   By default the exchange data resides in memory in the container
   where ${projectName} runs.
   This includes the default session implementation,
   which is backed by the HttpSession that the container handles.
   You can opt to store session data on the user-agent instead, however.
   For details and to consider whether your data fits, see
   <link
    xlink:href="reference#JwtSession"
    xlink:role="http://docbook.org/xlink/role/olink"
    xlink:show="new"
   >JwtSession</link>.
   When you use the <literal>JwtSession</literal> implementation,
   be sure to share the encryption keys across all servers,
   so that any server can read session cookies from any other.
  </para>

  <para>
   If your data does not fit in an HTTP cookie,
   for example because when encrypted it is larger than 4 KB,
   consider storing a reference in the cookie,
   and then retrieve the data by using another filter.
   ${projectName} logs warning messages if the JwtSession cookie is too large.
   Using a reference can also work when a server becomes unavailable,
   and the load balancer must fail requests over to another server in the pool.
  </para>

  <para>
   If some data attached to an exchange must be stored on the server side,
   then you have additional configuration steps to perform
   for session stickiness and for session replication.
   Session stickiness means that the load balancer sends all requests
   from the same client session to the same server.
   Session stickiness helps to ensure that a client request goes
   to the server holding the original session data.
   Session replication involves writing session data
   either to other servers or to a data store,
   so that if one server goes down,
   other servers can read the session data and continue processing.
   Session replication helps when one server fails,
   allowing another server to take its place
   without having to start the session over again.
   If you set up session stickiness but not session replication,
   when a server crashes the client session information for that server is lost,
   and the client must start again with a new session.
  </para>

  <para>
   How you configure session stickiness and session replication
   depends on your load balancer and on your container.
  </para>

  <itemizedlist>
   <para>
    Apache Tomcat can help with session stickiness,
    and a Tomcat cluster can handle session replication.
   </para>

   <listitem>
    <para>
     If you choose to use the
     <link
      xlink:show="new"
      xlink:href="http://tomcat.apache.org/connectors-doc/"
     >Apache Tomcat connector</link> (mod_jk) on your web server
     to perform load balancing, then see the
     <link
      xlink:show="new"
      xlink:href="http://tomcat.apache.org/connectors-doc/generic_howto/loadbalancers.html"
     ><citetitle>LoadBalancer HowTo</citetitle></link> for details.
    </para>

    <para>
     Notice in that HowTo that
     you configure the <literal>jvmRoute</literal> attribute
     in the Tomcat server configuration,
     <filename>/path/to/tomcat/conf/server.xml</filename>,
     to identify the server.
     The connector can use this identifier to achieve session stickiness.
    </para>
   </listitem>

   <listitem>
    <para>
     A Tomcat
     <link
      xlink:show="new"
      xlink:href="http://tomcat.apache.org/tomcat-7.0-doc/config/cluster.html"
     >cluster</link> configuration can handle session replication.
     When setting up a cluster configuration, the
     <link
      xlink:show="new"
      xlink:href="http://tomcat.apache.org/tomcat-7.0-doc/config/cluster-manager.html"
     >ClusterManager</link> defines the session replication implementation.
    </para>
   </listitem>
  </itemizedlist>

  <itemizedlist>
   <para>
    Jetty has provisions for session stickiness,
    and also for session replication through clustering.
   </para>

   <listitem>
    <para>
     Jetty's persistent session mechanism appends a node ID to the session ID,
     in the same way Tomcat appends the <literal>jvmRoute</literal> value
     to the session cookie.
     This can be useful for session stickiness
     if your load balancer examines the session ID.
    </para>
   </listitem>

   <listitem>
    <para>
     <link
      xlink:show="new"
      xlink:href="http://www.eclipse.org/jetty/documentation/current/session-clustering-jdbc.html"
     >Session Clustering with a Database</link>
     describes how to configure Jetty to persist sessions over JDBC,
     allowing session replication.
    </para>

    <para>
     Unless it is set up to be highly available,
     the database can be a single point of failure in this case.
    </para>
   </listitem>

   <listitem>
    <para>
     <link
      xlink:show="new"
      xlink:href="http://www.eclipse.org/jetty/documentation/current/session-clustering-mongodb.html"
     >Session Clustering with MongoDB</link>
     describes how to configure Jetty to persist sessions in MongoDB,
     allowing session replication.
    </para>

    <para>
     The Jetty documentation recommends this implementation
     when session data is seldom written but often read.
    </para>
   </listitem>
  </itemizedlist>
 </section>

 <section xml:id="client-side-security">
  <title>Configuring ${projectName} For HTTPS (Client-Side)</title>

  <para>
   For ${projectName} to connect to a server securely over HTTPS,
   ${projectName} must be able to trust the server.
   The default settings rely on the Java environment trust store
   to trust server certificates.
   The Java environment default trust store includes
   public key signing certificates
   from many well-known Certificate Authorities (CAs).
   If all servers present certificates signed by these CAs,
   then you have nothing to configure.
  </para>

  <para>
   If however the server certificates are self-signed
   or signed by a CA whose certificate is not trusted out of the box,
   then you can configure a
   <link
    xlink:show="new"
    xlink:href="reference#KeyStore"
    xlink:role="http://docbook.org/xlink/role/olink"
   >KeyStore</link>,
   <link
    xlink:show="new"
    xlink:href="reference#TrustManager"
    xlink:role="http://docbook.org/xlink/role/olink"
   >TrustManager</link>,
   and optionally a
   <link
    xlink:show="new"
    xlink:href="reference#KeyManager"
    xlink:role="http://docbook.org/xlink/role/olink"
   >KeyManager</link>
   to reference when configuring an
   <link
    xlink:show="new"
    xlink:href="reference#HttpClient"
    xlink:role="http://docbook.org/xlink/role/olink"
   >HttpClient</link>
   to enable ${projectName} to trust servers when acting as a client.
  </para>

  <para>
   The KeyStore holds the servers' certificates or the CA signing certificate.
   The TrustManager allows ${projectName} to handle the certificates
   in the KeyStore when deciding whether to trust a server certificate.
   The optional KeyManager allows ${projectName} to present its certificate
   from the key store when the server must authenticate ${projectName} as client.
   The HttpClient references whatever TrustManager and KeyManager you configure.
  </para>

  <para>
   You can configure each of these either globally for the ${projectName} server,
   of locally for a particular ClientHandler configuration.
  </para>

  <para>
   The Java KeyStore holds the peer servers' public key certificates
   (and optionally the ${projectName} certificate and private key).
   For example, suppose you have a certificate file, <filename>ca.crt</filename>,
   that holds the trusted signer's certificate
   of the CA who signed the server certificates
   of the servers in your deployment.
   In that case, you could import the certificate into a Java Key Store file,
   <filename>/path/to/keystore.jks</filename>.
  </para>

  <screen>
$ <userinput>keytool \
 -import \
 -trustcacerts \
 -keystore /path/to/keystore \
 -file ca.crt \
 -alias ca-cert \
 -storepass changeit</userinput>
  </screen>

  <para>
   You could then configure the following "KeyStore" for ${projectName}
   that holds the trusted certificate.
   Notice that the "file" field takes an expression that evaluates to a URL,
   starting with a scheme such as <literal>file://</literal>.
  </para>

  <programlisting language="javascript">
{
    "name": "MyKeyStore",
    "type": "KeyStore",
    "config": {
        "file": "file:///path/to/keystore",
        "password": "changeit"
    }
}
  </programlisting>

  <para>
   The TrustManager handles the certificates in the KeyStore
   when deciding whether to trust the server certificate.
   The TrustManager references your KeyStore.
  </para>

  <programlisting language="javascript">
{
    "name": "MyTrustManager",
    "type": "TrustManager",
    "config": {
        "keystore": "MyKeyStore"
    }
}
  </programlisting>

  <variablelist>
   <para>
    The HttpClient configuration has the following security settings.
   </para>

   <varlistentry>
    <term>"trustManager"</term>
    <listitem>
     <para>
      This references your TrustManager.
     </para>

     <para>
      Recall that you must configure this
      when your server certificates are not trusted out of the box.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>"hostnameVerifier"</term>
    <listitem>
     <para>
      This defines how the HttpClient verifies host names in server certificates.
     </para>

     <para>
      By default, host name verification is turned off.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>"keyManager"</term>
    <listitem>
     <para>
      This references your optional KeyManager.
     </para>

     <para>
      Configure this if servers request that ${projectName} present
      its certificate as part of mutual authentication.
     </para>

     <para>
      In that case, generate a key pair for ${projectName},
      and have the certificate signed by a well-known CA.
      See the <command>keytool</command> documentation for instructions.
      You can use a different key store for the KeyManager
      than you use for the TrustManager.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   The following HttpClient configuration references "MyTrustManager"
   and sets browser-compatible host name verification.
  </para>

  <programlisting language="javascript">
{
    "name": "HttpClient",
    "type": "HttpClient",
    "config": {
        "hostnameVerifier": "BROWSER_COMPATIBLE",
        "trustManager": "MyTrustManager"
    }
}
  </programlisting>
 </section>

 <section xml:id="keystore-for-jwt-encryption">
  <title>Setting Up Keys For JWT Encryption</title>

  <para>
   You can use
   <link
    xlink:show="new"
    xlink:href="reference#JwtSession"
    xlink:role="http://docbook.org/xlink/role/olink"
   >JwtSession</link> to configure ${projectName}
   to store session information in JWT cookies on the user-agent,
   rather than storing the information
   in the container where ${projectName} runs.
  </para>

  <para>
   In order to encrypt the JWTs, ${projectName} needs cryptographic keys.
   ${projectName} can generate its own key pair in memory,
   but that key pair disappears on restart
   and cannot be shared across ${projectName} servers.
  </para>

  <para>
   Alternatively, ${projectName} can use keys from a key store.
   The following steps describe how to prepare the key store for JWT encryption.
  </para>

  <procedure>
   <step>
    <para>
     Generate the key pair in a new key store file
     by using the Java <command>keytool</command> command.
    </para>

    <para>
     The following command generates a Java Key Store format file,
     <filename>/path/to/keystore.jks</filename>,
     holding a key pair with alias <literal>jwe-key</literal>.
     Notice that both the key store and the private key have the same password.
    </para>

    <screen>
$ <userinput>keytool \
 -genkey \
 -alias jwe-key \
 -keyalg rsa \
 -keystore /path/to/keystore.jks \
 -storepass changeit \
 -keypass changeit \
 -dname "CN=www.example.com,O=Example Corp"</userinput>
    </screen>
   </step>

   <step>
    <para>
     Add a
     <link
      xlink:show="new"
      xlink:href="reference#KeyStore"
      xlink:role="http://docbook.org/xlink/role/olink"
     >KeyStore</link>
     to your configuration that references the key store file.
    </para>

    <programlisting language="javascript">
{
    "name": "MyKeyStore",
    "type": "KeyStore",
    "config": {
        "file": "file:///path/to/keystore.jks",
        "password": "changeit"
    }
}
    </programlisting>
   </step>

   <step>
    <para>
     Add a JwtSession to your configuration that references your KeyStore.
    </para>

    <programlisting language="javascript">
{
    "name": "MyJwtSession",
    "type": "JwtSession",
    "config": {
        "keystore": "MyKeyStore",
        "alias": "jwe-key",
        "password": "changeit",
        "cookieName": "${projectName}"
    }
}
    </programlisting>
   </step>

   <step>
    <para>
     Specify your JwtSession object in the top-level configuration,
     or in the route configuration.
    </para>

    <programlisting language="javascript">
"session": "MyJwtSession"
    </programlisting>
   </step>
  </procedure>
 </section>
</chapter>
