<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START
  !
  ! This work is licensed under the Creative Commons
  ! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  ! To view a copy of this license, visit
  ! http://creativecommons.org/licenses/by-nc-nd/3.0/
  ! or send a letter to Creative Commons, 444 Castro Street,
  ! Suite 900, Mountain View, California, 94041, USA.
  !
  ! You can also obtain a copy of the license at
  ! src/main/resources/legal-notices/CC-BY-NC-ND.txt.
  ! See the License for the specific language governing permissions
  ! and limitations under the License.
  !
  ! If applicable, add the following below this CCPL HEADER, with the fields
  ! enclosed by brackets "[]" replaced with your own identifying information:
  !      Portions Copyright [yyyy] [name of copyright owner]
  !
  ! CCPL HEADER END
  !
  !      Copyright 2011-2014 ForgeRock AS
  !    
-->
<chapter xml:id='chap-usecases'
 xmlns='http://docbook.org/ns/docbook'
 version='5.0' xml:lang='en'
 xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
 xsi:schemaLocation='http://docbook.org/ns/docbook http://docbook.org/xml/5.0/xsd/docbook.xsd'
 xmlns:xlink='http://www.w3.org/1999/xlink'>
 <title>Detailed Use Cases</title>

 <para>This chapter diagrams and describes common use case request and
 response flows.</para>

 <section xml:id="portal-app-login">
  <title>Portal Application Login</title>

  <indexterm>
   <primary>Use cases</primary>
  </indexterm>

  <para>The figure below illustrates a sample flow with a description of each
  request from the browser to the back end application.
  This flow is based on the tutorial,
  <link
   xlink:show="new"
   xlink:href="gateway-guide#tutorial-credentials-from-file"
   xlink:role="http://docbook.org/xlink/role/olink"
  ><citetitle>Login With Credentials From a File</citetitle></link>.
  Try the tutorial yourself to learn how
  ${projectName} works. The Flat-File attribute store contains only one set of
  credentials. ${projectName} makes the assumption this user is logging into the
  sample application. In a real deployment ${projectName} would look up the user
  credentials using its own session, a SAML2 assertion, or a header from an
  OpenAM policy agent. Use cases that follow show examples of these types
  of deployments.</para>

  <mediaobject xml:id="figure-portal-app-login">
   <imageobject>
    <imagedata fileref="images/portal-app-login.png" format="PNG" />
   </imageobject>
   <textobject>
    <para>This image diagrams seven steps comprising a portal
    application login.</para>
   </textobject>
  </mediaobject>

  <orderedlist>
   <listitem>
    <para>User accesses the Portal.</para>
   </listitem>
   <listitem>
    <para>${projectName} intercepts request, finds no login page and passes it
    through.</para>
   </listitem>
   <listitem>
    <para>Portal finds no local session and redirects to its login page for
    authentication.</para>
   </listitem>
   <listitem>
    <para>${projectName} intercepts the redirect, finds a match for the login page,
    fetches the credentials from the flat file.</para>
   </listitem>
   <listitem>
    <para>${projectName} creates the login form and POSTs it to the Portal login
    page.</para>
   </listitem>
   <listitem>
    <para>Portal validates the credentials and redirects to the user's home
    page.</para>
   </listitem>
   <listitem>
    <para>${projectName} passes the request through to the browser.</para>
   </listitem>
  </orderedlist>
 </section>

 <section xml:id="am-integration">
  <title>OpenAM Integration</title>

  <indexterm>
   <primary>Use cases</primary>
  </indexterm>

  <para>The figure below illustrates ${projectName} integrated into an OpenAM
  deployment. In this deployment ${projectName} is running in a container
  that is protected by an OpenAM policy agent. The agent is configured to
  forward a header, with the subject (user) of the single sign-on session, to
  ${projectName}. ${projectName} then uses the subject as the login credentials, or uses the
  subject as a reference to look up the login credentials in a database or
  directory. The HR application is integrated into the SSO deployment without
  an agent or any modification to the application or its deployment
  configuration.</para>

  <mediaobject xml:id="figure-am-integration">
   <imageobject>
    <imagedata fileref="images/am-integration.png" format="PNG" />
   </imageobject>
   <textobject>
    <para>
     This image diagrams the steps comprising a login integrated with OpenAM.
    </para>
   </textobject>
  </mediaobject>

  <orderedlist>
   <listitem>
    <para>User browses to the Portal.</para>
   </listitem>

   <listitem>
    <para>
     OpenAM policy agent intercepts the request,
     finds no valid OpenAM session, redirects the browser to...
    </para>
   </listitem>

   <listitem>
    <para>
     ...an OpenAM login page.</para>
   </listitem>

   <listitem>
    <para>
     OpenAM logs in the user and redirects...
    </para>
   </listitem>

   <listitem>
    <para>
     ...back to the Portal.
    </para>
   </listitem>

   <listitem>
    <para>OpenAM plugin finds a valid session, request goes through, ${projectName}
    passes the request through to the Portal.
    </para>
   </listitem>
   <listitem>
    <para>Portal finds no local session, redirects to the Portal login
    page.</para>
   </listitem>
   <listitem>
    <para>${projectName} inspects the redirect, finds a match for the login page,
    creates the login form, and POSTs it to the Portal.</para>
   </listitem>
   <listitem>
    <para>Portal validates the credentials and redirects to the Portal
    page.</para>
   </listitem>
   <listitem>
    <para>${projectName} passes the request through to the browser.</para>
   </listitem>
  </orderedlist>
 </section>

 <section xml:id="sp-initiated-sso">
  <title>${projectName} Federation SP Initiated SAML2 SSO</title>

  <indexterm>
   <primary>Use cases</primary>
  </indexterm>

  <para>The figure below illustrates ${projectName} Federation providing
  SAML2 endpoint features acting as Service Provider in an SP initiated single
  sign-on configuration. In this sample, the HR application is an outsourced provider
  of HR services and has started seeing increased demand for SAML2 support in
  their core application. The companies to which they outsource are refusing
  proprietary means of authentication and demanding the widely accepted SAML2
  standard. The HR application cannot be modified to support
  SAML2 nor do they have the time or money to integrate and deploy all of
  OpenAM. With ${projectName} Federation, the HR application deploys
  ${projectName} in front of their
  HR application, configures it as a SAML2 endpoint for SP initiated SSO,
  and configures it to log users into the HR application upon successful
  verification of the SAML2 assertion from their customers.</para>

  <mediaobject xml:id="figure-sp-initiated-sso">
   <imageobject>
    <imagedata fileref="images/sp-initiated-sso.png" format="PNG" />
   </imageobject>
   <textobject>
    <para>
     This image diagrams the steps of service provider-initiated
     SAML 2.0 single sign-on.
    </para>
   </textobject>
  </mediaobject>

  <orderedlist>
   <listitem>
    <para>The user accesses the HR application through a bookmark in the
    browser.</para>
   </listitem>

   <listitem>
    <para>${projectName} Federation inspects the request, no match is found for the
    HR application's login page so the request goes through.</para>
   </listitem>

   <listitem>
    <para>HR application finds no HR session, sends a redirect to its login
    page.</para>
   </listitem>

   <listitem>
    <para>
     ${projectName} Federation intercepts the redirect,
     finds a match for the login page, and...
    </para>
   </listitem>

   <listitem>
    <para>
     ...issues an SP-initiated SSO SAML 2.0 request to the organization's IDP.
    </para>
   </listitem>

   <listitem>
    <para>
     The IDP receives the SAML 2.0 AuthN request and authenticates the user.
    </para>
   </listitem>

   <listitem>
    <para>
     After authenticating the user the IDP sends a SAML 2.0 POST...
    </para>
   </listitem>

   <listitem>
    <para>
     ...to ${projectName} Federation using an auto-submitting form in the browser.
    </para>

    <para>
     ${projectName} Federation validates the assertion
     and makes the assertion attributes available to the ${projectName} login chain.
    </para>
   </listitem>

   <listitem>
    <para>${projectName} login chain gets the user credentials and POSTs the login form
    to the application.</para>
   </listitem>

   <listitem>
    <para>The HR application verifies the credentials and redirects to its
    home page.</para>
   </listitem>

   <listitem>
    <para>
     ${projectName} Federation passes the HR application's redirect to the browser.
    </para>
   </listitem>
  </orderedlist>
 </section>

 <section xml:id="idp-initiated-sso">
  <title>${projectName} Federation IDP Initiated SAML2 SSO</title>

  <indexterm>
   <primary>Use cases</primary>
  </indexterm>

  <para>The figure below illustrates ${projectName} Federation providing SAML2
  endpoint features acting as a Service Provider in a IDP initiated single
  sign-on configuration.</para>

  <mediaobject xml:id="figure-idp-initiated-sso">
   <imageobject>
    <imagedata fileref="images/idp-initiated-sso.png" format="PNG" />
   </imageobject>
   <textobject>
    <para>This image diagrams the five steps of identity provider initiated
    SAML2 single sign on.</para>
   </textobject>
  </mediaobject>

  <orderedlist>
   <listitem>
    <para>User clicks the HR link on the company portal and is redirected to
    the company IDP for authentication.</para>
   </listitem>
   <listitem>
    <para>IDP sends an AuthN Response to the HR application.</para>
   </listitem>
   <listitem>
    <para>${projectName} Federation receives the POST, validates the assertion, and
    makes the attributes available to the ${projectName} login chain.
    </para>
   </listitem>
   <listitem>
    <para>${projectName} login chain retrieves the user credentials and POSTs the login
    form to the HR application.</para>
   </listitem>
   <listitem>
    <para>HR application validates the credentials and redirects to the main
    page of the application.</para>
   </listitem>
  </orderedlist>
 </section>

 <section xml:id="saml2-pep">
  <title>Standards Based SAML2 Agent</title>

  <indexterm>
   <primary>Use cases</primary>
  </indexterm>

  <para>The figure below illustrates ${projectName} Federation as a standards
  based replacement for OpenAM policy agents.</para>

  <mediaobject xml:id="figure-saml2-pep">
   <imageobject>
    <imagedata fileref="images/saml2-pep.png" format="PNG" />
   </imageobject>
   <textobject>
    <para>
     This image diagrams the steps showing how ${projectName} Federation works
     as a SAML2 based policy enforcement point.
    </para>
   </textobject>
  </mediaobject>

  <orderedlist>
   <listitem>
    <para>The user accesses an internal Payroll application.</para>
   </listitem>
   <listitem>
    <para>${projectName} Federation inspects the request, no match is found for the
    Payroll application's login page so the request goes through.</para>
   </listitem>
   <listitem>
    <para>Payroll application finds no Payroll session, sends a redirect to its
    login page.</para>
   </listitem>

   <listitem>
    <para>
     ${projectName} Federation intercepts the redirect,
     finds a match for the login page, and...
    </para>
   </listitem>

   <listitem>
    <para>
     ...issues an SP initiated SSO SAML 2.0 request to OpenAM.
    </para>
   </listitem>

   <listitem>
    <para>
     OpenAM receives the SAML2 AuthN and authenticates the user.
    </para>
   </listitem>

   <listitem>
    <para>
     After authenticating the user the IDP sends a SAML 2.0 POST...
    </para>
   </listitem>

   <listitem>
    <para>
     ...to ${projectName} Federation using an auto-submitting form in the browser.
    </para>

    <para>
     ${projectName} Federation validates the assertion
     and makes the assertion attributes available to the ${projectName} login chain.
    </para>
   </listitem>

   <listitem>
    <para>${projectName} login chain gets the user credentials and POSTs the login
    form to the application.</para>
   </listitem>

   <listitem>
    <para>The Payroll application verifies the credentials and redirects to its
    home page.</para>
   </listitem>

   <listitem>
    <para>
     ${projectName} Federation passes the Payroll application's redirect to the browser.
    </para>
   </listitem>
  </orderedlist>
 </section>
</chapter>
