<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START
  !
  ! This work is licensed under the Creative Commons
  ! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  ! To view a copy of this license, visit
  ! http://creativecommons.org/licenses/by-nc-nd/3.0/
  ! or send a letter to Creative Commons, 444 Castro Street,
  ! Suite 900, Mountain View, California, 94041, USA.
  !
  ! You can also obtain a copy of the license at
  ! src/main/resources/legal-notices/CC-BY-NC-ND.txt.
  ! See the License for the specific language governing permissions
  ! and limitations under the License.
  !
  ! If applicable, add the following below this CCPL HEADER, with the fields
  ! enclosed by brackets "[]" replaced with your own identifying information:
  !      Portions Copyright [yyyy] [name of copyright owner]
  !
  ! CCPL HEADER END
  !
  !      Copyright 2011-2012 ForgeRock AS
  !
-->
<chapter xml:id='chap-gateway-tutorial'
 xmlns='http://docbook.org/ns/docbook'
 version='5.0' xml:lang='en'
 xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
 xsi:schemaLocation='http://docbook.org/ns/docbook http://docbook.org/xml/5.0/xsd/docbook.xsd'
 xmlns:xlink='http://www.w3.org/1999/xlink'
 xmlns:xinclude='http://www.w3.org/2001/XInclude'>
 <title>Gateway Tutorial with WordPress</title>

 <itemizedlist>
  <para>This tutorial gives you hands on experience with the basic features of
  OpenIG. You install the Gateway in your network and point it to an
  installation of the WordPress Portal hosted at <link xlink:show="new"
  xlink:href="http://demo.forgerock.com:8080/wordpress"
  >http://demo.forgerock.com:8080/wordpress</link>. The tutorial progresses
  through the following steps and explains what is happening by walking you
  through OpenIG configuration.</para>
  <listitem>
   <para>Pure reverse proxy mode to the Portal</para>
  </listitem>
  <listitem>
   <para>Login with hard coded credentials</para>
  </listitem>
  <listitem>
   <para>Login with credentials from a flat file</para>
  </listitem>
  <listitem>
   <para>Login with credentials from MySQL</para>
  </listitem>
 </itemizedlist>

 <para>Before you begin the tutorial, read the chapter on <link
 xlink:href="gateway-guide#chap-howitworks"
 xlink:role="http://docbook.org/xlink/role/olink"><citetitle>How OpenIG
 Works</citetitle></link>.</para>

 <section>
  <title>Detailed Flow</title>

  <para>The figure and the steps below detail the flow between the Browser, the
  Gateway and the Portal for a basic login sequence to the Portal.  The
  key concept to understand is all requests to the application are routed
  through OpenIG by modifying the DNS entry for the target application.
  OpenIG can then be configured to intercept specific pages, such as
  login pages, and create requests to log the user in.</para>

  <mediaobject>
   <imageobject>
    <imagedata fileref="images/gateway-tutorial.png" format="PNG" />
   </imageobject>
   <textobject>
    <para>This diagram shows the flow of requests during user login.</para>
   </textobject>
  </mediaobject>

  <orderedlist>
   <listitem>
    <para>User browses to the Portal, browser host makes a DNS request to get
    the IP address for <literal>demo.forgerock.com</literal>, DNS returns the
    IP address of OpenIG.</para>
   </listitem>
   <listitem>
    <para>Browser sends the request to OpenIG.</para>
   </listitem>
   <listitem>
    <para>OpenIG inspects the request, finds no login page match.</para>
   </listitem>
   <listitem>
    <para>OpenIG forwards the original request to the Portal.</para>
   </listitem>
   <listitem>
    <para>Portal finds no local application session and redirects to the Portal
    login page.</para>
   </listitem>
   <listitem>
    <para>OpenIG intercepts the redirect, inspects the request, finds a login
    page match.</para>
   </listitem>
   <listitem>
    <para>OpenIG creates the login form.</para>
   </listitem>
   <listitem>
    <para>OpenIG POSTs the login form to the Portal.</para>
   </listitem>
   <listitem>
    <para>Portal validates the login and redirects to the Portal end user
    page.</para>
   </listitem>
   <listitem>
    <para>OpenIG receives the final redirect and passes it back to the
    Browser.</para>
   </listitem>
  </orderedlist>
 </section>

 <section>
  <title>Setup Summary</title>

  <itemizedlist>
   <para>To keep things simple, these instructions assume you are running OpenIG
   and the Browser on a single host.  If they are on separate hosts, make sure
   the host or DNS changes impact the Browser host. This tutorial also assumes
   Jetty 7 for the container, but you can use any supported container.</para>

   <listitem>
    <para>OpenIG IP address 10.0.1.1 (substitute your OpenIG's IP
    address)</para>
   </listitem>
   <listitem>
    <para>Jetty 7 listening on port 8080</para>
   </listitem>
   <listitem>
    <para>OpenIG deployed under the root context</para>
   </listitem>
   <listitem>
    <para>DNS or <filename>/etc/hosts</filename> pointing
    <literal>demo.forgerock.com</literal> to 10.0.1.1 (substitute your OpenIG's
    IP address)</para>
   </listitem>
  </itemizedlist>
 </section>

 <section>
  <title>Installing OpenIG</title>

  <para>See <link xlink:href="gateway-guide#chap-quickstart"
  xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Quick Start With
  Jetty &amp; Samples</citetitle></link> for instructions, and have your
  container listen on port 8080.</para>
 </section>

 <section>
  <title>Configuring the Browser Host</title>

  <para>With OpenIG running, configure the browser to go through OpenIG to
  get to the Portal. To do this we need to modify DNS or
  <filename>/etc/hosts</filename> so <literal>demo.forgerock.com</literal>
  points to the IP address of the host running OpenIG. If you are using
  <filename>/etc/hosts</filename> be sure to check that the naming services
  for your host check checking files before DNS. On UNIX systems this is
  configured in <filename>/etc/nsswitch.conf</filename>. Assuming OpenIG
  is running on 10.0.1.1, the <filename>/etc/hosts</filename> entry should be
  the following:</para>

  <literallayout class="monospaced">10.0.1.1   demo.forgerock.com</literallayout>

  <para>Before continuing please verify your name to IP address changes are
  working properly. The simplest way to do this is to ping
  <literal>demo.forgerock.com</literal>. You should see the following if you
  have properly configured your name to IP mapping:</para>

  <screen>$ ping demo.forgerock.com
ping demo.forgerock.com
PING demo.forgerock.com (10.0.1.1): 56 data bytes
64 bytes from 10.0.1.1: icmp_seq=0 ttl=64 time=0.053 ms</screen>

  <para>If the ping command returns the actual address of
  <literal>demo.forgerock.com</literal>, you need to recheck your
  settings.</para>
 </section>

 <section>
  <title>Configuring OpenIG &amp; Trying It Out</title>

  <para>For the remainder of this document, <literal>$HOME</literal> refers to
  the location where you unzipped your sample configuration files.</para>

  <para>Download and unzip the <link
  xlink:href="http://openig.forgerock.org/forgerock-sample-configs.zip">sample
  configuration files</link>. If you installed through quick start you already
  have the configuration files downloaded and installed.</para>

  <para>Copy <filename>WordPressProxyOnly.json</filename> to
  <filename>$HOME/.ForgeRock/OpenIG/config.json</filename>. By default, OpenIG
  looks for <filename>$HOME/.ForgeRock/OpenIG/config.json</filename> for its
  configuration. You must restart the OpenIG container when making any change
  to the configuration file.</para>

  <screen>$ cp $HOME/forgerock-sample-configs/WordPressProxyOnly.json
 $HOME/.ForgeRock/OpenIG/config.json
$ jetty.sh restart</screen>

  <para>To try out the first sample browse to <link xlink:show="new"
  xlink:href="http://demo.forgerock.com:8080/wordpress"
  >http://demo.forgerock.com:8080/wordpress</link>. You should see the WordPress
  Portal home page. If you click on the login link you should be prompted to
  login to the application as if you were accessing it directly. To verify you
  are actually going through OpenIG, stop the OpenIG container, refresh your
  browser and try to access the application again. If you still see the
  application, make sure your DNS or host files are configured to point to
  OpenIG instead of the Portal. You can login to the Portal with user name
  <literal>george</literal> and password <literal>costanza</literal>. The next
  section shows how to configure OpenIG to intercept the login page and
  automatically log you in when it sees that you have clicked the login
  link.</para>

  <para>To see what is happening behind the scenes, take a look at
  <filename>$HOME/.ForgeRock/OpenIG/config.json</filename>. Look for the
  HandlerServlet. This is the servlet entry point to OpenIG. The HandlerServlet
  passes the request off to another handler which may be a chain of filters
  and handlers. In the pure proxy case there is no special logic to execute so
  it hands off to the ClientHandler. The job of the ClientHandler is to send
  the request on to the target. Since there are no chains called before the
  ClientHandler, the request passes through to the target untouched.</para>
 </section>

 <section>
  <title>Login with Hard Coded Credentials</title>

  <para>Now that OpenIG can proxy all traffic to and from the application, the
  next step is to configure OpenIG to intercept the login page, and POST the
  login form to the Portal.</para>

  <screen>$ cp $HOME/forgerock-sample-configs/WordPressLogin.json
 $HOME/.ForgeRock/OpenIG/config.json
$ jetty.sh restart</screen>

  <para>As you changed the OpenIG configuration file, you must restart the
  OpenIG container. After restarting you should be able to go to <link
  xlink:href="http://demo.forgerock.com:8080/wordpress"
  >http://demo.forgerock.com:8080/wordpress</link>, click on the login link,
  and be logged in as the user george without entering your credentials. OpenIG
  has intercepted the request for the login page, created the login form, and
  POSTed the request to the Portal.</para>

  <para>To see what is happening behind the scenes, take a look at
  <filename>$HOME/.ForgeRock/OpenIG/config.json</filename>. This time you
  notice the HandlerServlet is calling the DispatchHandler. The DispatchHandler
  has a condition which checks for the presence of
  <filename>wp-login.php</filename> (the login page) in the URI path. If the
  condition is false (no login page), the ClientHandler is called sending the
  request on to the Portal. If the condition is true, OpenIG has found the
  login page, and calls the LoginChain for further processing. The LoginChain
  calls its filter, the LoginRequestFilter, which creates the login form, and
  then calls the ClientHandler to send the form to the Portal. If you look at
  the LoginRequestFilter, you notice it defines the method, URI, and form
  parameters for the request which is sent by the ClientHandler. In the form
  parameters you see the hard coded credentials, which are used to log you in
  as the user <literal>george</literal>.</para>
 </section>

 <section>
  <title>Login with Credentials From a Flat File</title>

  <para>Hard coding login credentials is great for a sample, but not realistic
  when it comes to a production deployment. In this next section you see how
  OpenIG can be configured to fetch the user's credentials from an external
  source, such as a directory or a database. For this sample, you use a flat
  file and the FileAttributesFilter. The key to look up the user in the flat
  file is hard coded, but you can understand how the key could come from
  something in the incoming request, such as an HTTP header, a session cookie,
  or even a SAML assertion.</para>

  <para>For this sample you must modify the file attribute in the
  <link xlink:href="reference#FileAttributesFilter"
  xlink:role="http://docbook.org/xlink/role/olink">FileAttributesFilter</link>
  object in <filename>config.json</filename> to reflect the location of the
  sample flat file. The location of the user file shipped with the samples is
  <filename>forgerock-sample-configs/userfile</filename>.</para>

  <screen>$ cp $HOME/forgerock-sample-configs/WordPressLoginFile.json
 $HOME/.ForgeRock/OpenIG/config.json
$ jetty.sh restart</screen>

  <para>After restarting the container, check that you can go to <link
  xlink:href="http://demo.forgerock.com:8080/wordpress" xlink:show="new"
  >http://demo.forgerock.com:8080/wordpress</link> and be logged in as the user
  <literal>george</literal> without seeing the login page. To verify the login
  credentials are being picked up from the flat file, change george's password,
  restart OpenIG, and try the login page again. You should get a login failed
  page. If you would like to log in as a different user, look for the value
  attribute in <filename>config.json</filename>, replace
  <literal>george@seinfeld.com</literal> with
  <literal>kramer@seinfeld.com</literal>.  Both <literal>george</literal> and
  <literal>kramer</literal> have accounts on the Portal so you can log in with
  either.</para>

  <para>To see what is happening behind the scenes, take a look at
  <filename>$HOME/.ForgeRock/OpenIG/config.json</filename>. For this sample,
  you added one additional filter to the LoginChain and made a slight
  modification to the LoginRequestFilter. Take a look at the LoginChain and you
  can see the filters attribute now has the value of
  <literal>["FileAttributesFilter","LoginRequestFilter" ]</literal>.  When the
  LoginChain is executed the FileAttributesFilter will be called prior to the
  LoginRequestFilter. The FileAttributesFilter sets the results of its lookup
  in the <link xlink:href="reference#Exchange"
  xlink:role="http://docbook.org/xlink/role/olink">Exchange</link> accessible
  through the <link xlink:href="reference#Exchange"
  xlink:role="http://docbook.org/xlink/role/olink">Expressions</link>
  <literal>${exchange.credentials.<replaceable>xxx</replaceable>}</literal>
  where <replaceable>xxx</replaceable> is the name of any one of the values
  from the flat file. Now take a look at the form attribute in the
  LoginRequestFilter. The hard coded values for log and password have been
  replaced with <literal>["${exchange.credentials.username}"]</literal> and
  <literal>["${exchange.credentials.password}"]</literal>.
  </para>
 </section>

 <section>
  <title>Login with Credentials From MySQL</title>

  <para>This sample fetches the login credentials from MySQL.
  You must have access to an instance of MySQL in order to execute this sample.
  If you do not have access or just want to see how the SqlAttributesFilter
  works, just read the rest of this section.</para>

  <para>For this sample you must configure your container for JNDI and MySQL.
  See the chapter on <link xlink:href="gateway-guide#chap-container"
  xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Container
  Configuration Help</citetitle></link> for instructions on configuring
  containers for use with JNDI and MySQL. You also must create an entry for a
  user and create a query which returns a result with user name and password
  attributes. The query in the sample assumes there is a table named
  <literal>users</literal>, with attributes <literal>username</literal> and
  <literal>password</literal>. The parameter passed into the prepared statement
  is <literal>email=george@seinfeld.com</literal>.</para>

  <screen>$ cp $HOME/forgerock-sample-configs/WordPressLoginSQL.json
 $HOME/.ForgeRock/OpenIG/config.json
$ jetty.sh restart</screen>

  <para>To see what is happening behind the scenes, take a look at
  <filename>$HOME/.ForgeRock/OpenIG/config.json</filename>. For this sample, 
  you replaced the FileAttributesFilter with the SqlAttributesFilter. The only
  difference between the filters is how they retrieve the attribute value pairs
  to set in the <link xlink:href="reference#Exchange"
  xlink:role="http://docbook.org/xlink/role/olink">Exchange</link>. Once the
  values are set in the Exchange, the LoginRequestFilter accesses them in the
  exact same way.</para>
 </section>
</chapter>
