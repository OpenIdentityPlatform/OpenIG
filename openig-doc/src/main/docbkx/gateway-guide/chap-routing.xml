<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START
  !
  ! This work is licensed under the Creative Commons
  ! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  ! To view a copy of this license, visit
  ! http://creativecommons.org/licenses/by-nc-nd/3.0/
  ! or send a letter to Creative Commons, 444 Castro Street,
  ! Suite 900, Mountain View, California, 94041, USA.
  !
  ! You can also obtain a copy of the license at
  ! src/main/resources/legal-notices/CC-BY-NC-ND.txt.
  ! See the License for the specific language governing permissions
  ! and limitations under the License.
  !
  ! If applicable, add the following below this CCPL HEADER, with the fields
  ! enclosed by brackets "[]" replaced with your own identifying information:
  !      Portions Copyright [yyyy] [name of copyright owner]
  !
  ! CCPL HEADER END
  !
  !      Copyright 2014 ForgeRock AS
  !
-->
<chapter xml:id="chap-routing"
         xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="en"
         xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
         xsi:schemaLocation="http://docbook.org/ns/docbook
                             http://docbook.org/xml/5.0/xsd/docbook.xsd"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xinclude="http://www.w3.org/2001/XInclude">
 <title>Routing Tutorial</title>

 <indexterm>
  <primary>Routing</primary>
 </indexterm>
 <indexterm>
  <primary>Configuration</primary>
  <secondary>Multiple applications</secondary>
 </indexterm>
 <indexterm>
  <primary>Configuration</primary>
  <secondary>Run time changes</secondary>
 </indexterm>
 <indexterm>
  <primary>Tutorials</primary>
  <secondary>Routing</secondary>
 </indexterm>

 <para>
  Other tutorials in this guide demonstrate how to use routes
  so that you can change the configuration without restarting ${projectName}.
 </para>

 <para>
  This tutorial takes a closer look at
  <link
   xlink:show="new"
   xlink:href="reference#Router"
   xlink:role="http://docbook.org/xlink/role/olink"
  >Router</link>
  and
  <link
   xlink:show="new"
   xlink:href="reference#Route"
   xlink:role="http://docbook.org/xlink/role/olink"
  >Route</link> configurations.
  This tutorial demonstrates the use of routes to handle multiple applications.
  It also shows how to lock down the configurations for deployment
  so that accidental changes to configuration files
  do not affect servers running in production.
 </para>

 <section xml:id="routing-before-you-start">
  <title>Before You Start</title>

  <para>
   Before you start this tutorial,
   prepare ${projectName} and the minimal HTTP server as you did for the chapter on
   <link
    xlink:show="new"
    xlink:href="gateway-guide#chap-quickstart"
    xlink:role="http://docbook.org/xlink/role/olink"
   ><citetitle>Getting Started</citetitle></link>.
  </para>

  <para>
   ${projectName} should be running in Jetty,
   configured to access the minimal HTTP server as described in that chapter.
  </para>

  <para>
   You start therefore with a default route
  </para>
 </section>


 <section xml:id="routing-router-setup">
  <title>Configuring the Router</title>

  <para>
   When you set up the first tutorial, you configured a Router.
  </para>

  <para>
   The Router is a handler that you can configure in the top-level
   <filename>config.json</filename> file for ${projectName},
   and in fact wherever you can configure a Handler.
   For the first tutorial, you added a Router as part of the base configuration,
   which is shown here again in the following listing.
  </para>

  <programlisting language="javascript">
<xinclude:include href="resources/config/config.json" parse="text">
 <xinclude:fallback>
  Failed to include JSON
 </xinclude:fallback>
</xinclude:include>
  </programlisting>

  <para>
   The Router's job is to pass the exchange to a route that matches a condition,
   and to periodically reload changed route configurations.
   As routes define the conditions on which they accept any given Exchange,
   the Router does not have to know about specific Routes in advance.
   In other words, you can configure the Router first
   and then add routes while ${projectName} is running,
   as you have done in other tutorials.
  </para>

  <para>
   The configuration shown above passes all Exchanges to the Router
   using the default settings, meaning that the Router
   monitors <filename>${warRoutesDir}</filename> for Routes.
   When ${projectName} receives a request,
   if more time has passed than the default scan interval of 10 seconds,
   then ${projectName} rescans the Routes directory for changes
   and reloads any Routes changes it finds.
  </para>
 </section>

 <section xml:id="routing-route-setup">
  <title>Configuring Additional Routes</title>

  <para>
   Routes are configurations to handle an Exchange
   that meets a specified condition.
  </para>

  <para>
   The condition is defined using a ${projectName}
   <link
    xlink:show="new"
    xlink:href="reference#Expressions"
    xlink:role="http://docbook.org/xlink/role/olink"
   >expression</link>, so it can be based on
   almost any characteristic of the Exchange
   or even of the ${projectName} runtime environment.
   Another way to think of the Route is like an independent
   <link
    xlink:show="new"
    xlink:href="reference#DispatchHandler"
    xlink:role="http://docbook.org/xlink/role/olink"
   >DispatchHandler</link>.
  </para>

  <para>
   Routes can also have their own names, used to order them lexicographically.
   If no name is specified, the Route file name is used.
  </para>

  <para>
   Routes can have a base URI to change the scheme, host, and port of the request.
  </para>

  <para>
   Routes wrap a heap of configuration objects,
   and hand off any Exchange they accept to a handler.
   In this way each Route is much like
   its own server-wide configuration file.
  </para>

  <para>
   If no condition is specified for the Route, the Route accepts any Exchange.
   The following is a basic default route that accepts any Exchange
   and forwards it on without changes.
   This object explicitly shows you all the fields of the Route object.
   (You could omit "condition" and "baseURI" here as they have no effect.)
  </para>

  <programlisting language="javascript">
{
    "heap": {
        "objects": [
            {
                "name": "ClientHandler",
                "type": "ClientHandler",
                "config": {}
            }
        ]
    },
    "name": "default",
    "condition": null,
    "baseURI": null,
    "handler": "ClientHandler"
}
  </programlisting>

  <orderedlist>
   <para>
    The rest of this section indicates how to set up Route configurations
    to direct requests to ForgeRock.com and ForgeRock.org
    based on a query string parameter.
   </para>

   <listitem>
    <para>
     Add a ForgeRock.com Route file in the routes directory,
     <filename>08-com.json</filename>, that holds the following content.
    </para>

  <programlisting language="javascript">
<xinclude:include href="resources/config/routes/08-com.json" parse="text">
 <xinclude:fallback>
  Failed to include JSON
 </xinclude:fallback>
</xinclude:include>
  </programlisting>

    <para>
     This Route accepts the Exchange when the query string parameter,
     <literal>site</literal> matches <literal>com</literal>.
     When this Route picks up an Exchange,
     it changes the request scheme, host, and port,
     and sends it to ForgeRock.com.
    </para>
   </listitem>


   <listitem>
    <para>
     Add a ForgeRock.org community Route file in the routes directory,
     <filename>08-org.json</filename>, that holds the following content.
    </para>

  <programlisting language="javascript">
<xinclude:include href="resources/config/routes/08-org.json" parse="text">
 <xinclude:fallback>
  Failed to include JSON
 </xinclude:fallback>
</xinclude:include>
  </programlisting>

    <para>
     This Route accepts the Exchange when the query string parameter,
     <literal>site</literal> matches <literal>org</literal>.
     When this Route picks up an Exchange,
     it changes the request scheme, host, and port,
     and sends it to ForgeRock.org.
    </para>
   </listitem>
  </orderedlist>
 </section>

 <section xml:id="routing-try-it-out">
  <title>Trying it Out</title>

  <para>
   At this point you can try your new route configurations.
  </para>

  <para>
   Browse to the .com URL:
   <link xlink:show="new" xlink:href="http://www.example.com:8080/?site=com" />.
  </para>

  <para>
   You should see the ForgeRock.com page.
  </para>

  <para>
   Browse to the .org URL:
   <link xlink:show="new" xlink:href="http://www.example.com:8080/?site=org" />.
  </para>

  <para>
   You should see the ForgeRock.org Community page.
  </para>

  <para>
   Now browse to the base URL to see that the default route still works:
   <link xlink:show="new" xlink:href="http://www.example.com:8080/" />.
  </para>

  <para>
   What happened behind the scenes?
  </para>

  <para>
   When you issued your first request with "?site=com",
   the request matched the condition defined in the ForgeRock.com route.
   ${projectName} rebased the request and sent it along to
   <literal>http://forgerock.com:80/</literal>.
  </para>

  <para>
   When you issued your second request with "?site=org",
   the request matched the condition defined in the ForgeRock.org Community route.
   ${projectName} rebased the request and sent it along to
   <literal>http://forgerock.org:80/</literal>.
  </para>

  <para>
   When the third request did not match any of the conditions defined,
   the Exchange was routed to the default Route (that accepts any Exchange).
   The static request filter returned the default page.
  </para>

  <para>
   At this point, tinker with your route configurations
   without stopping ${projectName}, and notice that changes are picked up
   every 10 seconds.
  </para>
 </section>

 <section xml:id="routing-lockdown">
  <title>Locking Down Route Configurations</title>

  <para>
   Having the Route configurations automatically reloaded is great in the lab,
   but is perhaps not what you want in production.
  </para>

  <para>
   In that case, stop the server, edit the Router "scanInterval", and restart.
   When "scanInterval" is set to -1, the Router only loads routes at startup.
  </para>

  <programlisting language="javascript">
{
    "name": "Router",
    "type": "Router",
    "config": {
        "scanInterval": -1
    }
}
  </programlisting>

  <para>
   You can also change the file system location to look for routes.
  </para>

  <programlisting language="javascript">
{
    "name": "Router",
    "type": "Router",
    "config": {
        "directory": "/path/to/safe/routes",
        "scanInterval": -1
    }
}
  </programlisting>
 </section>
</chapter>
