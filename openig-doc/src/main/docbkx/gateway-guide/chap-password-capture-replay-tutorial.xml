<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START
  !
  ! This work is licensed under the Creative Commons
  ! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  ! To view a copy of this license, visit
  ! http://creativecommons.org/licenses/by-nc-nd/3.0/
  ! or send a letter to Creative Commons, 444 Castro Street,
  ! Suite 900, Mountain View, California, 94041, USA.
  !
  ! You can also obtain a copy of the license at
  ! src/main/resources/legal-notices/CC-BY-NC-ND.txt.
  ! See the License for the specific language governing permissions
  ! and limitations under the License.
  !
  ! If applicable, add the following below this CCPL HEADER, with the fields
  ! enclosed by brackets "[]" replaced with your own identifying information:
  !      Portions Copyright [yyyy] [name of copyright owner]
  !
  ! CCPL HEADER END
  !
  !      Copyright 2011-2014 ForgeRock AS
  !    
-->
<chapter xml:id='chap-password-capture-replay-tutorial'
 xmlns='http://docbook.org/ns/docbook'
 version='5.0' xml:lang='en'
 xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
 xsi:schemaLocation='http://docbook.org/ns/docbook
                     http://docbook.org/xml/5.0/xsd/docbook.xsd'
 xmlns:xlink='http://www.w3.org/1999/xlink'
 xmlns:xinclude='http://www.w3.org/2001/XInclude'>
 <title>Tutorial On OpenAM Password Capture &amp; Replay</title>

 <indexterm>
  <primary>Tutorials</primary>
  <secondary>Capture &amp; relay passwords</secondary>
 </indexterm>

 <para>
  This tutorial walks you through an OpenAM integration
  with OpenAM's password capture and replay feature.
  This feature of OpenAM is typically used to integrate
  with Microsoft Outlook Web Access (OWA) or SharePoint
  by capturing the password during OpenAM authentication,
  encrypting it, and adding to the session, which is later decrypted
  and used for Basic Authentication to OWA or SharePoint.
  This tutorial shows how you can configure ${projectName}
  to use the user name and password from the OpenAM Authentication
  to log the user an application.
  This is also how you would achieve OWA or SharePoint integration.
 </para>

 <section xml:id="capture-replay-flow">
  <title>Detailed Flow</title>

  <para>
   The figure below illustrates the flow of requests
   for a user who is not yet logged in to OpenAM
   accessing a protected application.
   After successful authentication, the user is logged into the application
   with the username and password from the OpenAM login session.
  </para>

  <mediaobject xml:id="figure-password-capture-replay-tutorial">
   <imageobject>
    <imagedata fileref="images/password-capture-replay-tutorial.png" format="PNG" />
   </imageobject>
   <textobject>
    <para>
     This diagram shows the flow of requests to access a protected application
     using OpenAM's password capture and replay feature.
    </para>
   </textobject>
  </mediaobject>

  <orderedlist>
   <listitem>
    <para>
     The user sends a browser request to access a protected application.
    </para>
   </listitem>

   <listitem>
    <para>
     The OpenAM policy agent protecting ${projectName} intercepts the request.
    </para>
   </listitem>

   <listitem>
    <para>
     The policy agent redirects the browser to OpenAM.
    </para>
   </listitem>

   <listitem>
    <para>
     OpenAM authenticates the user, capturing the login credentials,
     storing the password in encrypted form in the user's session.
    </para>
   </listitem>

   <listitem>
    <para>
     After authentication, OpenAM redirects the browser...
    </para>
   </listitem>

   <listitem>
    <para>
     ...back to the protected application.
    </para>
   </listitem>

   <listitem>
    <para>
     The OpenAM policy agent protecting ${projectName} intercepts the request,
     validates the user session with OpenAM (not shown here),
     adds the username and encrypted password to headers in the request,
     and passes the request to ${projectName}.
    </para>
   </listitem>

   <listitem>
    <para>
     ${projectName} retrieves the credentials from the headers,
     and uses the username and decrypted password
     to replace the request with an HTTP POST of the login form.
    </para>
   </listitem>

   <listitem>
    <para>
     The application validates the login credentials,
     and sends a response back to ${projectName}.
    </para>
   </listitem>

   <listitem>
    <para>
     ${projectName} passes the response from the application back to the user's browser.
    </para>
   </listitem>
  </orderedlist>

 </section>

 <section xml:id="capture-replay-summary">
  <title>Setup Summary</title>

  <para>
   This tutorial calls for you to set up several different software components.
  </para>

  <itemizedlist>
   <listitem>
    <para>
     OpenAM is installed on
     <literal>http://openam.example.com:8088/openam</literal>.
    </para>
   </listitem>

   <listitem>
    <xinclude:include href="${sampleServerDownloadDoc}">
     <xinclude:fallback>
      <para>
       Failed to include sample server download link.
      </para>
     </xinclude:fallback>
    </xinclude:include>

    <para>
     The ${sampleServerJar} application
     listens at <literal>http://www.example.com:8081</literal>.
     The minimal HTTP server is run
     with the <command>java -jar ${sampleServerJar}</command> command,
     as described in the chapter on
     <link
      xlink:show="new"
      xlink:href="gateway-guide#chap-quickstart"
      xlink:role="http://docbook.org/xlink/role/olink"
     ><citetitle>Getting Started</citetitle></link>.
    </para>
   </listitem>

   <listitem>
    <para>
     ${projectName} is deployed in Jetty as described in the chapter on
     <link
      xlink:show="new"
      xlink:href="gateway-guide#chap-quickstart"
      xlink:role="http://docbook.org/xlink/role/olink"
     ><citetitle>Getting Started</citetitle></link>.
     ${projectName} listens at <literal>http://www.example.com:8080</literal>.
    </para>
   </listitem>

   <listitem>
    <para>
     ${projectName} is protected by an OpenAM Java EE policy agent also deployed in Jetty.
     The policy agent is configured
     to add username and encrypted password headers to the HTTP requests.
    </para>
   </listitem>
  </itemizedlist>
 </section>

 <section xml:id="capture-replay-setup">
  <title>Setup Details</title>

  <para>
   In this section, it is assumed that you are familiar
   with the components involved.
   For OpenAM documentation, see
   <link xlink:show="new" xlink:href="http://docs.forgerock.org/en/openam/" />.
   For OpenAM policy agent documentation, see
   <link xlink:show="new" xlink:href="http://docs.forgerock.org/en/openam-pa/" />.
  </para>

  <section xml:id="capture-relay-setup-openam">
   <title>Setting Up OpenAM Server</title>

   <para>
    Install and configure OpenAM on
    <literal>http://openam.example.com:8088/openam</literal>
    with the default configuration.
    If you use a different configuration,
    make sure you substitute in the tutorial accordingly.
   </para>

   <para>
    Create a sample user Subject in the top level realm with
    username <literal>george</literal> and password <literal>costanza</literal>.
    Test that you can login to OpenAM with this username and password.
   </para>
  </section>

  <section xml:id="capture-relay-setup-pa-profile">
   <title>Preparing the Policy Agent Profile</title>

   <itemizedlist>
    <para>
     Create the Java EE agent profile in the top level realm
     with the following settings:
    </para>

    <listitem>
     <para>
      Server URL: <literal>http://openam.example.com:8088/openam</literal>
     </para>
    </listitem>

    <listitem>
     <para>
      Agent URL: <literal>http://www.example.com:8080/agentapp</literal>
     </para>
    </listitem>
   </itemizedlist>

   <itemizedlist>
    <para>
     Edit the policy agent profile to add these settings,
     making sure to save your work when you finish.
    </para>

    <listitem>
     <para>
      On the Global settings tab page under General, change the Agent Filter Mode
      from <literal>ALL</literal> to <literal>SSO_ONLY</literal>.
     </para>
    </listitem>

    <listitem>
     <para>
      On the Application tab page under Session Attributes Processing,
      change the Session Attribute Fetch Mode
      from <literal>NONE</literal> to <literal>HTTP_HEADER</literal>.
     </para>
    </listitem>

    <listitem>
     <para>
      Also on the Application tab page under Session Attributes Processing,
      add <literal>UserToken=username</literal>
      and <literal>sunIdentityUserPassword=password</literal>
      to the Session Attribute Mapping list.
     </para>
    </listitem>
   </itemizedlist>
  </section>

  <section xml:id="password-capture-configuration">
   <title>Configuring Password Capture</title>

   <para>
    Configure password capture in OpenAM as follows.
   </para>

   <itemizedlist>
    <listitem>
     <para>
      In the OpenAM console
      under Access Control > / (Top Level Realm) > Authentication,
      click All Core Settings,
      and then add
      <literal>com.sun.identity.authentication.spi.ReplayPasswd</literal>
      to the Authentication Post Processing Classes.
     </para>
    </listitem>

    <listitem>
     <para>
      Run OpenAM's <command>com.sun.identity.common.DESGenKey</command> command
      to generate a shared key for the OpenAM Authentication plugin
      and for ${projectName}.
     </para>

     <para>
      To run this command using the <command>java</command> command,
      you must add OpenAM .jar file libraries to the Java class path.
      The library names depend on the version of OpenAM that you use.
     </para>

     <para>
      When using OpenAM 11.0.0 for example, the libraries are
      <filename>forgerock-util-1.1.0.jar</filename>
      <filename>openam-core-11.0.0.jar</filename>,
      and <filename>openam-shared-11.0.0.jar</filename>.
      As an example,
      if OpenAM 11.0.0 is installed in Apache Tomcat under <literal>/openam</literal>
      you would run the command
      <command>java -classpath
      /path/to/tomcat/webapps/openam/WEB-INF/lib/forgerock-util-1.1.0.jar:/path/to/tomcat/webapps/openam/WEB-INF/lib/openam-core-11.0.0.jar:/path/to/tomcat/webapps/openam/WEB-INF/lib/openam-shared-11.0.0.jar
      com.sun.identity.common.DESGenKey</command>.
     </para>

     <para>
      When using OpenAM 10 and earlier, the libraries are
      <filename>amserver.jar</filename>
      and <filename>opensso-sharedlib.jar</filename>.
      As an example, if OpenAM 10 is installed in Apache Tomcat under <literal>/openam</literal>
      you would run the command
      <command>java -classpath
      /path/to/tomcat/webapps/openam/WEB-INF/lib/amserver.jar:/path/to/tomcat/webapps/openam/WEB-INF/lib/opensso-sharedlib.jar
      com.sun.identity.common.DESGenKey</command>.
     </para>

     <para>
      The output of the command shows the generated key,
      as in the following example.
     </para>

     <screen>
$ <userinput>cd /path/to/tomcat/webapps/openam/WEB-INF/lib</userinput>
$ <userinput>java -classpath \
 forgerock-util-1.1.0.jar:openam-core-11.0.0.jar:openam-shared-11.0.0.jar \
 com.sun.identity.common.DESGenKey</userinput>
<computeroutput>Key ==> ipvvZF2Mj0k</computeroutput>
     </screen>
    </listitem>

    <listitem>
     <para>
      In the OpenAM console under Configuration > Servers and Sites,
      click on the server name link,
      go to the Advanced tab
      and add <literal>com.sun.am.replaypasswd.key</literal>
      with the value of the key generated in the previous step.
     </para>

     <para>
      Restart the OpenAM server after adding the Advanced property
      for the change to take effect.
     </para>
    </listitem>
   </itemizedlist>
  </section>

  <section xml:id="capture-relay-setup-openig-minimal-server">
   <title>Installing ${projectName}</title>

   <para>
    Install ${projectName} in Jetty and run the minimal HTTP server
    as described in the chapter on
    <link
     xlink:show="new"
     xlink:href="gateway-guide#chap-quickstart"
     xlink:role="http://docbook.org/xlink/role/olink"
    ><citetitle>Getting Started</citetitle></link>.
   </para>

   <para>
    When you finish, ${projectName} should be running in Jetty,
    configured to access the minimal HTTP server as described in that chapter.
   </para>

   <para>
    The initial ${projectName} configuration file should look like the one used
    to proxy requests through to the HTTP server
    and to capture request and response data, see
    <link
     xlink:show="new"
     xlink:href="gateway-guide#config-proxy-and-capture"
     xlink:role="http://docbook.org/xlink/role/olink"
    ><citetitle>Configuration for Proxy &amp; Capture</citetitle></link>.
   </para>

   <para>
    To test your setup, access the HTTP server home page through ${projectName} at
    <link xlink:show="new" xlink:href="http://www.example.com:8080" />.
    Login as username <literal>george</literal>, password <literal>costanza</literal>.
    You should see a page showing the username and some information about the request.
   </para>
  </section>
  
  <section xml:id="capture-relay-setup-pa">
   <title>Installing the Policy Agent</title>
  
   <para>
    Install the OpenAM Java EE policy agent alongside ${projectName} in Jetty,
    listening at <literal>http://www.example.com:8080</literal>,
    using the following hints.
   </para>

   <itemizedlist>
    <listitem>
     <para>
      Jetty Server Config Directory : <literal>/path/to/jetty/etc</literal>
     </para>
    </listitem>

    <listitem>
     <para>
      Jetty installation directory. : <literal>/path/to/jetty</literal>
     </para>
    </listitem>

    <listitem>
     <para>
      OpenAM server URL : <literal>http://openam.example.com:8088/openam</literal>
     </para>
    </listitem>

    <listitem>
     <para>
      Agent URL : <literal>http://www.example.com:8080/agentapp</literal>
     </para>
    </listitem>

    <listitem>
     <para>
      After copying <filename>agentapp.war</filename>
      into <filename>/path/to/jetty/webapps/</filename>,
      also add the following filter configuration to
      <filename>/path/to/jetty/etc/webdefault.xml</filename>.
     </para>

     <programlisting language="xml">
<xinclude:include href="resources/jetty-filter-config-xml.txt" parse="text">
 <xinclude:fallback>
  Failed to include filter config
 </xinclude:fallback>
</xinclude:include>
     </programlisting>
    </listitem>
   </itemizedlist>

   <para>
    To test the configuration, start Jetty, and then browse to
    <link xlink:show="new" xlink:href="http://www.example.com:8080/replay" />.
    You should be redirected to OpenAM for authentication.
   </para>

   <para>
    Do not log in, however.
    You have not yet configured a route
    to handle requests to <literal>/replay</literal>.
   </para>
  </section>
  
  <section xml:id="capture-relay-configure-openig">
   <title>Configuring ${projectName}</title>

   <para>
    Add a new route to the ${projectName} configuration
    to handle OpenAM password capture &amp; replay.
   </para>

   <para>
    To add the route, add the following route configuration file
    as <filename>${warRoutesDir}/04-replay.json</filename>.
   </para>

   <programlisting language="javascript">
<xinclude:include href="resources/config/routes/04-replay.json" parse="text">
 <xinclude:fallback>
  Failed to include JSON
 </xinclude:fallback>
</xinclude:include>
   </programlisting>

   <para>
    On Windows, the file name should be
    <filename>${warRoutesDir}\04-replay.json</filename>.
   </para>

   <para>
    Change <literal>DESKEY</literal> to the actual key value
    that you generated in <xref linkend="password-capture-configuration" />.
   </para>

   <itemizedlist>
    <para>
     Notice the following features of the new route.
    </para>

    <listitem>
     <para>
      The "CryptoHeaderFilter" decrypts the password
      that OpenAM captured and encrypted,
      and that the OpenAM policy agent included in the headers for the request.
     </para>

     <para>
      The resulting "CryptoHeaderFilter" should look something like this,
      but using the "key" value that you generated:
     </para>

     <programlisting language="javascript">
{
    "name": "CryptoHeaderFilter",
    "type": "CryptoHeaderFilter",
    "config": {
        "messageType": "REQUEST",
        "operation": "DECRYPT",
        "algorithm": "DES/ECB/NoPadding",
        "key": "ipvvZF2Mj0k",
        "keyType": "DES",
        "charSet": "utf-8",
        "headers": [
            "password"
        ]
    }
}
     </programlisting>
    </listitem>

    <listitem>
     <para>
      The "LoginRequest" filter retrieves
      the username and password from the exchange
      and replaces your browser's original HTTP GET request
      with an HTTP POST login request
      that contains the credentials to authenticate.
     </para>
    </listitem>

    <listitem>
     <para>
      The "HeaderFilter" filter removes the username and password headers
      before continuing to process the exchange.
     </para>
    </listitem>

    <listitem>
     <para>
      The route matches requests to <literal>/replay</literal>.
     </para>
    </listitem>
   </itemizedlist>
  </section>
  
 </section>

 <section xml:id="capture-replay-try-it-out">
  <title>Trying It Out</title>

  <para>
   Log out of OpenAM if you are logged in already.
  </para>

  <para>
   Access the new route,
   <link xlink:show="new" xlink:href="http://www.example.com:8080/replay" />.
  </para>

  <para>
   If you are not already logged into OpenAM
   you should be redirected to the OpenAM login page.
   Login with username <literal>george</literal>, password <literal>costanza</literal>.
   After login you should be redirected back to the application.
  </para>
 </section>
</chapter>
