<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START
  !
  ! This work is licensed under the Creative Commons
  ! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  ! To view a copy of this license, visit
  ! http://creativecommons.org/licenses/by-nc-nd/3.0/
  ! or send a letter to Creative Commons, 444 Castro Street,
  ! Suite 900, Mountain View, California, 94041, USA.
  !
  ! You can also obtain a copy of the license at
  ! src/main/resources/legal-notices/CC-BY-NC-ND.txt.
  ! See the License for the specific language governing permissions
  ! and limitations under the License.
  !
  ! If applicable, add the following below this CCPL HEADER, with the fields
  ! enclosed by brackets "[]" replaced with your own identifying information:
  !      Portions Copyright [yyyy] [name of copyright owner]
  !
  ! CCPL HEADER END
  !
  !      Copyright 2011-2014 ForgeRock AS
  !    
-->
<chapter xml:id='chap-password-capture-replay-tutorial'
 xmlns='http://docbook.org/ns/docbook'
 version='5.0' xml:lang='en'
 xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
 xsi:schemaLocation='http://docbook.org/ns/docbook
                     http://docbook.org/xml/5.0/xsd/docbook.xsd'
 xmlns:xlink='http://www.w3.org/1999/xlink'>
 <title>Tutorial On OpenAM Password Capture &amp; Replay</title>

 <indexterm>
  <primary>Tutorials</primary>
  <secondary>Capture &amp; relay passwords</secondary>
 </indexterm>

 <para>This tutorial walks you through an OpenAM integration with OpenAM's
 password capture and replay feature. This feature of OpenAM is typically used
 to integrate with Outlook Web Access or Sharepoint by capturing the password
 during OpenAM authentication, encrypting it, adding to the session, which is
 later decrypted and used for Basic Authentication to OWA or Sharepoint.
 This tutorial shows how you can configure OpenIG to use the user name and
 password from the OpenAM Authentication to log the user into WordPress.
 This is also how you would achieve OWA or Sharepoint integration.</para>

 <section>
  <title>Detailed Flow</title>

  <para>The figure below illustrates the flow of requests for a user logging
  into OpenAM and then being logged into WordPress with the user name and
  password from the OpenAM login session.</para>

  <mediaobject xml:id="figure-password-capture-replay-tutorial">
   <imageobject>
    <imagedata fileref="images/password-capture-replay-tutorial.png" format="PNG" />
   </imageobject>
   <textobject>
    <para>This diagram shows the flow of requests during user login.</para>
   </textobject>
  </mediaobject>

  <orderedlist>
   <listitem>
    <para>User authenticates to OpenAM establishing a session, OpenAM is
    configured to capture the password, encrypt it, and then store it
    in the user's session.</para>
   </listitem>
   <listitem>
    <para>User browses to a WordPress page requiring authentication.</para>
   </listitem>
   <listitem>
    <para>OpenAM Agent intercepts the request, validates the user session,
    and populates HTTP headers with the user name and encrypted password
    from the session.</para>
   </listitem>
   <listitem>
    <para>Agent passes the original request with populated headers to
    OpenIG.</para>
   </listitem>
   <listitem>
    <para>OpenIG inspects the request, does not find a match for the
    WordPress login page, so forwards the request on.</para>
   </listitem>
   <listitem>
    <para>WordPress finds no application session and redirects to its
    login page.</para>
   </listitem>
   <listitem>
    <para>OpenIG intercepts, sees the login page, creates the login form
    with the user name and decrypted password from the headers inserted by
    the Agent.</para>
   </listitem>
   <listitem>
    <para>WordPress validates the login form, returns an application
    session and the user's home page.</para>
   </listitem>
   <listitem>
    <para>WordPress home page returned to the user.</para>
   </listitem>
  </orderedlist>
 </section>

 <section>
  <title>Setup Summary</title>

  <para>OpenAM is installed on
  <literal>http://www.idp.com:8888/openam</literal>. WordPress hosted on the
  ForgeRock demo site at <link xlink:show="new"
  xlink:href="http://demo.forgerock.com:8080/wordpress" />, populated with a
  sample user <literal>george</literal> with password <literal>costanza</literal>.
  OpenIG is deployed on an instance of Tomcat protected by an OpenAM J2EE
  agent. The J2EE agent is configured for cross domain SSO, and to add the user
  name and replay password headers to the HTTP requests.</para>
 </section>

 <section>
  <title>Setup Details</title>

  <para>This section assumes you are familiar with the components
  involved.</para>

  <section>
   <title>OpenAM server</title>

   <para>Install and configure OpenAM on
   <literal>http://www.idp.com:8888/openam</literal> with the default
   configuration. You can install OpenAM with your configuration, but
   be sure to substitute in the tutorial accordingly.</para>

   <para>Create a sample user with user name <literal>george</literal>
   and password <literal>constanza</literal>.</para>

   <para>To test, startup OpenAM and make sure you can login with the
   user name <literal>george</literal> and password
   <literal>constanza</literal>.</para>
  </section>

  <section>
   <title>Tomcat Agent Profile</title>

   <itemizedlist>
    <para>Create the J2EE agent profile with the following settings:</para>
    <listitem>
     <para>Server URL http://www.idp.com:8888/openam</para>
    </listitem>
    <listitem>
     <para>Agent URL http://demo.forgerock.com:8080/agentapp</para>
    </listitem>
    <listitem>
     <para>Under Global settings change the Agent filter mode from
     ALL to SSO_ONLY</para>
    </listitem>
    <listitem>
     <para>Under Application &gt; Session Attributes Processing change
     the Session Attribute Fetch Mode from none to HTTP_Header</para>
    </listitem>
    <listitem>
     <para>Under Application &gt; Session Attributes Processing &gt;
     Session Attribute Mappings add UserToken=username and
     sunIdentityUserPassword=password</para>
    </listitem>
    <listitem>
     <para>Under SSO &gt; Cross Domain SSO select the Enabled checkbox.
     If you have installed OpenAM in the forgerock.com domain you do not
     need to enable cross domain SSO.</para>
    </listitem>
   </itemizedlist>
  </section>

  <section xml:id="password-capture-configuration">
   <title>Password Capture Configuration</title>

   <itemizedlist>
    <listitem>
     <para>In the OpenAM console under Access Control &gt; Realm &gt;
      Authentication click "All Core Settings" and add
      com.sun.identity.authentication.spi.ReplayPasswd to the
      Authentication Post Processing Classes.</para>
    </listitem>
    <listitem>
     <para>
      Run OpenAM's <command>com.sun.identity.common.DESGenKey</command> command
      to generate a shared key for the OpenAM Authentication plugin
      and for OpenIG.
     </para>

     <para>
      To run this command using the <command>java</command> command,
      you must add OpenAM .jar file libraries to the Java class path.
      The library names depend on the version of OpenAM that you use.
     </para>

     <para>
      When using OpenAM 11.0.0 for example, the libraries are
      <filename>forgerock-util-1.1.0.jar</filename>
      <filename>openam-core-11.0.0.jar</filename>,
      and <filename>openam-shared-11.0.0.jar</filename>.
      As an example, if OpenAM 11.0.0 is installed in Apache Tomcat under /openam
      you would run the command
      <command>java -classpath
      /path/to/tomcat/webapps/openam/WEB-INF/lib/forgerock-util-1.1.0.jar:/path/to/tomcat/webapps/openam/WEB-INF/lib/openam-core-11.0.0.jar:/path/to/tomcat/webapps/openam/WEB-INF/lib/openam-shared-11.0.0.jar
      com.sun.identity.common.DESGenKey</command>.
     </para>

     <para>
      When using OpenAM 10 and earlier, the libraries are
      <filename>amserver.jar</filename>
      and <filename>opensso-sharedlib.jar</filename>.
      As an example, if OpenAM 10 is installed in Apache Tomcat under /openam
      you would run the command
      <command>java -classpath
      /path/to/tomcat/webapps/openam/WEB-INF/lib/amserver.jar:/path/to/tomcat/webapps/openam/WEB-INF/lib/opensso-sharedlib.jar
      com.sun.identity.common.DESGenKey</command>.
     </para>

     <para>
      The output of the command shows the generated key,
      as in the following example.
     </para>

     <screen>
$ <userinput>cd /path/to/tomcat/webapps/openam/WEB-INF/lib</userinput>
$ <userinput>java -classpath \
 forgerock-util-1.1.0.jar:openam-core-11.0.0.jar:openam-shared-11.0.0.jar \
 com.sun.identity.common.DESGenKey</userinput>
<computeroutput>Key ==> NK0Exz2tq0M=</computeroutput>
     </screen>
    </listitem>
    <listitem>
     <para>In the OpenAM console under Configuration &gt; Servers and Sites
      click on your server name, go to Advanced and add
      com.sun.am.replaypasswd.key with the value of the key generated
      in the previous step.</para>
     <para>You must restart the OpenAM server after changing Advanced
      properties.</para>
    </listitem>
   </itemizedlist>
  </section>

  <section>
   <title>Tomcat Installation</title>

    <para>Install on OpenIG host listening on port 8080.</para>

    <para><filename>/etc/hosts</filename> or equivalent with a
    mapping of demo.forgerock.com to 127.0.0.1. This example
    assumes the browser and OpenIG are on the same host. If the
    browser is on a different host you must create a mapping so that
    all requests to demo.forgerock.com are resolved to the OpenIG
    host.</para>

    <para>To test, startup Tomcat and make sure you can browse
    to http://demo.forgerock.com:8080 and get the Tomcat home page.
    If you get a different page, then you have not modified your host
    file settings correctly. demo.forgerock.com should resolve to either
    localhost or the host OpenIG where is running.</para>
  </section>
  
  <section>
   <title>Policy Agent installation</title>
  
    <para>Install on the OpenIG host on Tomcat at
    http://demo.forgerock.com:8080</para>

    <para>OpenSSO server URL: http://www.idp.com:8888/openam</para>

    <para>Install agent filter in global web.xml true</para>

    <para>Agent URL: http://demo.forgerock.com:8080/agentapp</para>
  
    <para>To test, startup Tomcat and browse to the request headers
    example at
    http://demo.forgerock.com:8080/examples/servlets/servlet/RequestHeaderExample.
    You should be redirected to OpenAM for authentication. Once logged in
    as user <literal>george</literal> with password
    <literal>constanza</literal> you should be redirected back to the
    examples page and be able to see the user name and replay password
    headers. The user name header should be george, the password header
    should be encrypted.</para>
  </section>
  
  <section>
   <title>Gateway Configuration</title>

   <para>See <link xlink:href="gateway-guide#chap-install"
   xlink:role="http://docbook.org/xlink/role/olink"><citetitle>Installing
   OpenIG</citetitle></link> for instructions, and have your
   container listen on port 8080. Install OpenIG in the root context by
   removing the existing root context directory
   <filename>$HOME/tomcat/webapps/ROOT/</filename> and then renaming the OpenIG
   .war to <filename>$HOME/tomcat/webapps/ROOT.war</filename>.</para>

   <para>Download the <link
   xlink:href="http://openig.forgerock.org/WordPressDecryptHeaderLogin.json"
   >WordPressDecryptHeaderLogin.json</link> configuration file, and use it to
   replace <filename>${warConfigDir}/config.json</filename>.</para>

   <para>On Windows, the configuration files belong in
   <filename>${windowsWarConfigDir}</filename>. To locate the
   <filename>%appdata%</filename> folder for your version of Windows, open
   Windows Explorer, type <literal>%appdata%</literal> as the file path, and
   press Enter. You must create the <filename>${windowsWarConfigDir}</filename>
   folder, and then copy the configuration files.</para>

   <para>Search for and replace <literal>DESKEY</literal> with the key
   generated when you enabled the password capture feature in OpenAM.</para>

   <para>Restart OpenIG after making changes to
   <filename>config.json</filename>.</para>
  </section>
  
  <section>
   <title>Trying It Out</title>
  
   <para>Browse to WordPress. If you are not already logged into OpenAM you
   should be redirected to the OpenAM login page. You should login with user
   name <literal>george</literal> and password <literal>constanza</literal>.
   After login you should be redirected back to the WordPress portal homepage.
   Now click on the login link and OpenIG logs you in as George Costanza.</para>
  
   <para>To see what is happening behind the scenes, take a look at
   <filename>${warConfigDir}/config.json</filename>. Look for the
   HandlerServlet. This is the servlet entry point to OpenIG. Notice it is
   calling the DispatchHandler. The DispatchHandler has a condition which
   checks for the presence of <filename>wp-login.php</filename> (the login
   page) in the URI path. If the condition is false (no login page), the
   ClientHandler is called sending the request on to the WordPress. If the
   condition is true, the Gateway has found the login page, and calls the
   LoginChain for further processing. The LoginChain calls its filters, the
   CryptoFilter, which looks for the replay password header and decrypts it,
   the LoginRequestFilter, which creates the login form, and then calls the
   ClientHandler to send the form to the WordPress. If you look at the
   LoginRequestFilter, you notice it defines the method, URI, and form
   parameters for the request which is sent by the ClientHandler. In the
   form parameters you see the user name and password retrieved from the user
   name and replay password headers in the HTTP request. These headers are
   created by the OpenAM agent from the user's OpenAM session and the replay
   password header is decrypted by the CryptoFilter prior to the
   LoginRequestFilter being executed.</para>
  </section>
 </section>
</chapter>
