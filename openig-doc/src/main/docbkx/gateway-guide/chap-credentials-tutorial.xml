<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START
  !
  ! This work is licensed under the Creative Commons
  ! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  ! To view a copy of this license, visit
  ! http://creativecommons.org/licenses/by-nc-nd/3.0/
  ! or send a letter to Creative Commons, 444 Castro Street,
  ! Suite 900, Mountain View, California, 94041, USA.
  !
  ! You can also obtain a copy of the license at
  ! src/main/resources/legal-notices/CC-BY-NC-ND.txt.
  ! See the License for the specific language governing permissions
  ! and limitations under the License.
  !
  ! If applicable, add the following below this CCPL HEADER, with the fields
  ! enclosed by brackets "[]" replaced with your own identifying information:
  !      Portions Copyright [yyyy] [name of copyright owner]
  !
  ! CCPL HEADER END
  !
  !      Copyright 2014 ForgeRock AS
  !
-->
<chapter xml:id='chap-credentials-tutorial'
         xmlns='http://docbook.org/ns/docbook'
         version='5.0' xml:lang='en'
         xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
         xsi:schemaLocation='http://docbook.org/ns/docbook
                     http://docbook.org/xml/5.0/xsd/docbook.xsd'
         xmlns:xlink='http://www.w3.org/1999/xlink'
         xmlns:xinclude='http://www.w3.org/2001/XInclude'>
 <title>Tutorial On Looking Up Credentials</title>

 <para>
  In the chapter on
  <link
   xlink:show="new"
   xlink:href="gateway-guide#chap-quickstart"
   xlink:role="http://docbook.org/xlink/role/olink"
  ><citetitle>Getting Started</citetitle></link>,
  you learned how to configure OpenIG
  to proxy traffic and capture request and response data.
  You also learned how to configure OpenIG
  to use a static request to log in with hard-coded credentials.
 </para>

 <para>
  This chapter shows you how OpenIG can look up credentials in external sources.
  For example, OpenIG can look up credentials in a file or in a relational database.
 </para>

 <section xml:id="tutorial-before-you-start">
  <title>Before You Start</title>

  <para>
   Before you start this tutorial,
   prepare OpenIG and the minimal HTTP server as you did for the chapter on
  <link
   xlink:show="new"
   xlink:href="gateway-guide#chap-quickstart"
   xlink:role="http://docbook.org/xlink/role/olink"
   ><citetitle>Getting Started</citetitle></link>.
  </para>

  <para>
   OpenIG should be running in Jetty,
   configured to access the minimal HTTP server as described in that chapter.
  </para>

  <para>
   The initial OpenIG configuration file should look like the one used
   to login with a hard-coded username and password, see
   <link
    xlink:show="new"
    xlink:href="gateway-guide#config-login-static-request"
    xlink:role="http://docbook.org/xlink/role/olink"
   ><citetitle>Configuration for Hard-Coded Credentials</citetitle></link>.
  </para>

  <tip>
   <para>
    If you get stuck running the following samples,
    know that you can activate OpenIG debug logging
    with a "ConsoleLogSink" configuration object.
    Add it as the first object in the array of configuration objects.
   </para>

   <programlisting language="javascript">
{
    "name": "LogSink",
    "type": "ConsoleLogSink",
    "config": {
        "level": "DEBUG"
    }
}
   </programlisting>
  </tip>
 </section>

 <section xml:id="tutorial-credentials-from-file">
  <title>Login With Credentials From a File</title>

  <para>
   This sample shows you how to configure OpenIG to get credentials from a file.
  </para>

  <para>
   The sample uses a comma-separated value file, <filename>userfile</filename>.
  </para>

  <programlisting language="java">
<xinclude:include href="resources/login-from-file/userfile" parse="text">
 <xinclude:fallback>
   Failed to include CSV file
 </xinclude:fallback>
</xinclude:include>
  </programlisting>

  <para>
   OpenIG looks up the user credentials based on the user's email address.
   OpenIG relies for this on
   a <literal>FileAttributesFilter</literal> configuration object.
  </para>

  <orderedlist>
   <para>
    Follow these steps to set up login with credentials from a file.
   </para>

   <listitem>
    <para>
     Add the user file on your system.
    </para>

    <screen>
$ <userinput>vi /tmp/userfile</userinput>
$ <userinput>cat /tmp/userfile</userinput>
<computeroutput><xinclude:include
 href="resources/login-from-file/userfile"
 parse="text"
 >
 <xinclude:fallback>
   Failed to include CSV file
 </xinclude:fallback>
</xinclude:include></computeroutput>
    </screen>

    <para>
     On Windows systems, use an appropriate path
     such as <filename>C:\Temp\userfile</filename>.
    </para>
   </listitem>

   <listitem>
    <para>
     Edit the OpenIG configuration file, <filename>config.json</filename>,
     to use the <literal>FileAttributesFilter</literal> configuration object.
    </para>

    <orderedlist>
     <para>
      To do this, make the following changes to the file.
     </para>

     <listitem>
      <para>
       Before the "LoginRequest" object,
       add a new <literal>FileAttributesFilter</literal> configuration object.
      </para>

      <para>
       The <literal>FileAttributesFilter</literal> configuration
       specifies the file to access and the fields of records in the file,
       the key and value to look up to retrieve the user's record,
       and where exchange to store the search results.
      </para>

      <para>
       The new filter configuration object should look like this:
      </para>

      <programlisting language="javascript">
{
    "name": "CredentialsFromFile",
    "type": "FileAttributesFilter",
    "config": {
        "target": "${exchange.credentials}",
        "file": "/tmp/userfile",
        "key": "email",
        "value": "george@example.com",
        "fields": [
            "username",
            "password",
            "fullname",
            "email"
        ]
    }
}
      </programlisting>

      <para>
       Do not forget to add the comma after the object,
       so that your configuration file remains valid JSON.
      </para>
     </listitem>

     <listitem>
      <para>
       Edit the list of filters in the "OutgoingChain" object
       to include your new filter before the "LoginRequest".
      </para>

      <para>
       The full "OutgoingChain" object should now look like this:
      </para>

      <programlisting language="javascript">
{
    "name": "OutgoingChain",
    "type": "Chain",
    "config": {
        "filters": [
            "CredentialsFromFile",
            "LoginRequest",
            "CaptureFilter"
        ],
        "handler": "DefaultHandler"
    }
}
      </programlisting>
     </listitem>

     <listitem>
      <para>
       Edit the "LoginRequest" configuration object
       so that it retrieves the username and password values from the exchange.
      </para>

      <para>
       The edited configuration object should look like this:
      </para>

      <programlisting language="javascript">
{
    "name": "LoginRequest",
    "type": "StaticRequestFilter",
    "config": {
        "method": "POST",
        "uri": "http://www.example.com:8081",
        "form": {
            "username": [
                "${exchange.credentials.username}"
            ],
            "password": [
                "${exchange.credentials.password}"
            ]
        }
    }
}
      </programlisting>
     </listitem>
    </orderedlist>

    <para>
     You can find the entire configuration file in the example,
     <link
      xlink:show="new"
      xlink:href="gateway-guide#config-login-from-file"
      xlink:role="http://docbook.org/xlink/role/olink"
      ><citetitle>Configuration for Login With Credentials From a File</citetitle></link>.
    </para>
   </listitem>

   <listitem>
    <para>
     On Windows systems, edit the path names to the user file and the log file.
    </para>
   </listitem>

   <listitem>
    <para>
     Verify that the configuration file is still valid JSON,
     and then save your work.
    </para>
   </listitem>

   <listitem>
    <para>
     Restart the Jetty server where OpenIG is deployed.
    </para>
   </listitem>
  </orderedlist>

  <para>
   Now browse to
   <link xlink:show="new" xlink:href="http://www.example.com:8080" />.
  </para>

  <para>
   If everything is configured correctly, OpenIG logs you in as George.
  </para>

  <para>
   What's happening behind the scenes?
  </para>

  <figure xml:id="figure-login-from-file">
   <mediaobject>
    <imageobject>
     <imagedata fileref="images/login-from-file.png" format="PNG" />
    </imageobject>
    <textobject>
     <para>
      This image diagrams the steps showing how OpenIG performs login
      with credentials retrieved from a file and a static request filter.
     </para>
    </textobject>
   </mediaobject>
  </figure>

  <para>
   OpenIG intercepts your browser's HTTP GET request.
   The OpenIG "FileAttributesFilter" looks up credentials in a file,
   and stores the credentials it finds in the exchange.
   OpenIG then calls the next filter in the chain, "StaticRequestFilter",
   passing the exchange object that now holds the credentials.
   The "StaticRequestFilter" filter pulls the credentials out of the exchange,
   builds the login form, and performs the HTTP POST request to the HTTP server.
   The HTTP server validates the credentials, and responds with a profile page.
   OpenIG then passes the response from the HTTP server to your browser.
  </para>
 </section>

 <section xml:id="tutorial-credentials-from-sql">
  <title>Login With Credentials From a Database</title>

  <para>
   This sample shows you how to configure OpenIG to get credentials from H2.
   This sample was developed with H2 1.4.178 and Jetty 9.1.4.
  </para>

  <para>
   Although this sample uses H2, OpenIG also works with other database software.
   OpenIG relies on the application server where it runs
   to connect to the database.
   Configuring OpenIG to retrieve data from a database is therefore
   a question of configuring the application server to connect to the database,
   and configuring OpenIG to choose the appropriate data source,
   and to send the appropriate SQL request to the database.
   As a result, the OpenIG configuration depends more on the data structure
   than on any particular database drivers or connection configuration.
  </para>

  <procedure xml:id="sql-prepare-database">
   <title>Preparing the Database</title>

   <para>
    Follow these steps to prepare the database.
   </para>

   <step>
    <para>
     On the system where OpenIG runs, download and unpack
     <link
      xlink:show="new"
      xlink:href="http://h2database.com"
     >H2 database</link>.
    </para>
   </step>

   <step>
    <para>
     Start H2.
    </para>

    <screen>
$ <userinput>sh /path/to/h2/bin/h2.sh</userinput>
    </screen>

    <para>
     H2 starts, listening on port 8082, and opens a browser console page.
    </para>
   </step>

   <step>
    <para>
     In the browser console page,
     select Generic H2 (Server) under Saved Settings.
     This sets the Driver Class, <literal>org.h2.Driver</literal>,
     the JDBC URL, <literal>jdbc:h2:tcp://localhost/~/test</literal>,
     the User Name, <literal>sa</literal>.
    </para>

    <para>
     In the Password field, type <literal>password</literal>.
    </para>

    <para>
     Then click Connect to access the console.
    </para>
   </step>

   <step>
    <para>
     Run a statement to create a users table
     based on the user file from
     <xref linkend="tutorial-credentials-from-file" />.
    </para>

    <para>
     If you have not created the user file on your system,
     put the following content in <filename>/tmp/userfile</filename>.
    </para>

  <programlisting language="java">
<xinclude:include href="resources/login-from-file/userfile" parse="text">
 <xinclude:fallback>
   Failed to include CSV file
 </xinclude:fallback>
</xinclude:include>
  </programlisting>

    <para>
     Then create the users table through the H2 console:
    </para>

    <programlisting language="none">
DROP TABLE IF EXISTS USERS;
CREATE TABLE USERS AS SELECT * FROM CSVREAD('/tmp/userfile');
    </programlisting>

    <para>
     On success, the table should contain the same users as the file.
     You can check this by running <literal>SELECT * FROM users;</literal>
     in the H2 console.
    </para>
   </step>
  </procedure>

  <procedure xml:id="sql-connect-to-database">
   <title>Preparing Jetty's Connection to the Database</title>

   <para>
    Follow these steps to enable Jetty to connect to the database.
   </para>

   <step>
    <para>
     Configure Jetty for JNDI as described in the Jetty documentation on
     <link
      xlink:show="new"
      xlink:href="http://www.eclipse.org/jetty/documentation/current/jndi.html"
     ><citetitle>Configuring JNDI</citetitle></link>.
    </para>

    <para>
     For the version of Jetty used in this sample,
     stop Jetty and add the following lines to
     <filename>/path/to/jetty/start.ini</filename>.
    </para>

    <programlisting language="none">
# ===========================================================
# Enable JNDI
# -----------------------------------------------------------
--module=jndi

# ===========================================================
# Enable additional webapp environment configurators
# -----------------------------------------------------------
OPTIONS=plus
etc/jetty-plus.xml
    </programlisting>
   </step>

   <step>
    <para>
     Copy the H2 library to the classpath for Jetty.
    </para>

    <screen>
$ <userinput>cp /path/to/h2/bin/h2-1.4.178.jar /path/to/jetty/lib/jndi/</userinput>
    </screen>
   </step>

   <step>
    <para>
     Define a JNDI resource for H2 in
     <filename>/path/to/jetty/etc/jetty.xml</filename>.
    </para>

     <programlisting language="xml">
<xinclude:include href="resources/jetty-h2-resource-xml.txt" parse="text">
 <xinclude:fallback>
  Failed to include XML
 </xinclude:fallback>
</xinclude:include>
     </programlisting>
   </step>

   <step>
    <para>
     Add a resource reference to the data source in
     <filename>/path/to/etc/webdefault.xml</filename>.
    </para>

     <programlisting language="xml">
<xinclude:include href="resources/jetty-h2-resource-ref-xml.txt" parse="text">
 <xinclude:fallback>
  Failed to include XML
 </xinclude:fallback>
</xinclude:include>
     </programlisting>
   </step>
  </procedure>

  <procedure xml:id="sql-configure-openig">
   <title>Preparing the OpenIG Configuration</title>

   <para>
    Follow these steps to prepare the OpenIG configuration
    to look up credentials in the database.
   </para>

   <step>
    <para>
     Edit the OpenIG configuration file, <filename>config.json</filename>,
     to use an <literal>SqlAttributesFilter</literal> configuration object.
    </para>

    <para>
     To do this, make the following changes to the file.
    </para>

    <substeps>
     <step>
      <para>
       Replace any content between the "OutgoingChain" and "LoginRequest" objects
       with a new <literal>SqlAttributesFilter</literal> configuration object.
      </para>

      <para>
       The <literal>SqlAttributesFilter</literal> configuration
       specifies the data source configured in the application server,
       the SQL statement and parameters to request the data,
       and the target where OpenIG stores the results.
      </para>

      <para>
       The new filter configuration object should look like this:
      </para>

      <informalexample><?dbfo pgwide="1"?>
       <programlisting language="javascript">
{
    "name": "CredentialsFromSql",
    "type": "SqlAttributesFilter",
    "config": {
        "target": "${exchange.credentials}",
        "dataSource": "java:comp/env/jdbc/forgerock",
        "preparedStatement": "SELECT username, password FROM users WHERE email = ?;",
        "parameters": [
            "george@example.com"
        ]
    }
}
       </programlisting>
      </informalexample>

      <para>
       Do not forget to add the comma after the object,
       so that your configuration file remains valid JSON.
      </para>
     </step>

     <step>
      <para>
       Edit the list of filters in the "OutgoingChain" object
       to include your new filter before the "LoginRequest".
      </para>

      <para>
       The full "OutgoingChain" object should now look like this:
      </para>

      <programlisting language="javascript">
{
    "name": "OutgoingChain",
    "type": "Chain",
    "config": {
        "filters": [
            "CredentialsFromSql",
            "LoginRequest",
            "CaptureFilter"
        ],
        "handler": "DefaultHandler"
    }
}
      </programlisting>
     </step>

     <step>
      <para>
       Edit the "LoginRequest" configuration object
       so that it retrieves the username and password values from the exchange.
      </para>

      <para>
       The edited configuration object should look like this:
      </para>

      <programlisting language="javascript">
{
    "name": "LoginRequest",
    "type": "StaticRequestFilter",
    "config": {
        "method": "POST",
        "uri": "http://www.example.com:8081",
        "form": {
            "username": [
                "${exchange.credentials.USERNAME}"
            ],
            "password": [
                "${exchange.credentials.PASSWORD}"
            ]
        }
    }
}
      </programlisting>

      <para>
       Notice that the request is for <literal>username, password</literal>,
       and that H2 returns the fields as
       <literal>USERNAME</literal> and <literal>PASSWORD</literal>.
       The configuration reflects this difference.
      </para>
     </step>
    </substeps>
   </step>

   <step>
    <para>
     Verify that the configuration file is still valid JSON,
     and then save your work.
    </para>


    <para>
     You can find the entire configuration file in the example,
     <link
      xlink:show="new"
      xlink:href="gateway-guide#config-login-from-sql"
      xlink:role="http://docbook.org/xlink/role/olink"
     ><citetitle>Configuration for Login With Credentials From a Database</citetitle></link>.
    </para>
   </step>
  </procedure>

  <procedure xml:id="try-login-sql">
   <title>To Try Logging In With Credentials From a Database</title>

   <para>
    With H2, Jetty, and OpenIG correctly configured, you can try it out.
   </para>

   <step>
    <para>
     Restart Jetty.
    </para>
   </step>

   <step>
    <para>
     Access the home page again,
     <link xlink:show="new" xlink:href="http://www.example.com:8080/" />.
    </para>

    <para>
     OpenIG logs you in automatically as George.
    </para>
   </step>
  </procedure>

  <para>
   What's happening behind the scenes?
  </para>

  <figure xml:id="figure-login-from-sql">
   <mediaobject>
    <imageobject>
     <imagedata fileref="images/login-from-sql.png" format="PNG" />
    </imageobject>
    <textobject>
     <para>
      This image diagrams the steps showing how OpenIG performs login
      with credentials retrieved from a database and a static request filter.
     </para>
    </textobject>
   </mediaobject>
  </figure>

  <para>
   OpenIG intercepts your browser's HTTP GET request.
   The OpenIG "SqlAttributesFilter" looks up credentials in H2,
   and stores the credentials it finds in the exchange.
   OpenIG then calls the next filter in the chain, "StaticRequestFilter",
   passing the exchange object that now holds the credentials.
   The "StaticRequestFilter" filter pulls the credentials out of the exchange,
   builds the login form, and performs the HTTP POST request to the HTTP server.
   The HTTP server validates the credentials, and responds with a profile page.
   OpenIG then passes the response from the HTTP server to your browser.
  </para>
 </section>
</chapter>
