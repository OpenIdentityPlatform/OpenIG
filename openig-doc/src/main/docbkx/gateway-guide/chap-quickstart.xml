<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START
  !
  ! This work is licensed under the Creative Commons
  ! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  ! To view a copy of this license, visit
  ! http://creativecommons.org/licenses/by-nc-nd/3.0/
  ! or send a letter to Creative Commons, 444 Castro Street,
  ! Suite 900, Mountain View, California, 94041, USA.
  !
  ! You can also obtain a copy of the license at
  ! src/main/resources/legal-notices/CC-BY-NC-ND.txt.
  ! See the License for the specific language governing permissions
  ! and limitations under the License.
  !
  ! If applicable, add the following below this CCPL HEADER, with the fields
  ! enclosed by brackets "[]" replaced with your own identifying information:
  !      Portions Copyright [yyyy] [name of copyright owner]
  !
  ! CCPL HEADER END
  !
  !      Copyright 2011-2014 ForgeRock AS
  !    
-->
<chapter xml:id='chap-quickstart'
 xmlns='http://docbook.org/ns/docbook'
 version='5.0' xml:lang='en'
 xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
 xsi:schemaLocation='http://docbook.org/ns/docbook
                     http://docbook.org/xml/5.0/xsd/docbook.xsd'
 xmlns:xlink='http://www.w3.org/1999/xlink'
 xmlns:xinclude='http://www.w3.org/2001/XInclude'>
 <title>Getting Started</title>

 <indexterm>
  <primary>Tutorials</primary>
  <secondary>Getting started</secondary>
 </indexterm>

 <para>
  This chapter provides instructions to get ${projectName} up and running on Jetty,
  configured to serve as reverse proxy
  to a minimal HTTP server for use when following along with the documentation.
  This allows you to quickly see how ${projectName} works,
  and provides hands on experience with a few key features.
  For more general installation and configuration instructions,
  start with the chapter on
  <link
   xlink:show="new"
   xlink:href="gateway-guide#chap-install"
   xlink:role="http://docbook.org/xlink/role/olink"
  ><citetitle>Installing ${projectName}</citetitle></link>.
 </para>

 <section xml:id="before-you-quickstart">
  <title>Before You Begin</title>

  <para>
   Make sure you have a supported Java Development Kit installed.
   For details, see the <citetitle>Release Notes</citetitle> section,
   <link
    xlink:show="new"
    xlink:href="release-notes#java-requirements"
    xlink:role="http://docbook.org/xlink/role/olink"
   ><citetitle>JDK Version</citetitle></link>.
  </para>
 </section>

 <section xml:id="quickstart-install">
  <title>Install ${projectName}</title>

  <para>
   You install ${projectName} in the root context of a web application container.
   In this chapter, you use Jetty server as the web application container.
  </para>

  <procedure>

   <para>
    To perform initial installation, follow these steps.
   </para>

   <step>
    <para>
     Download and unzip a supported version of Jetty server.
    </para>

    <para>
     Supported versions are listed in the <citetitle>Release Notes</citetitle> section,
     <link
     xlink:show="new"
     xlink:href="release-notes#which-container"
     xlink:role="http://docbook.org/xlink/role/olink"
     ><citetitle>Web Application Containers</citetitle></link>.
    </para>
   </step>

   <step>
    <para>
     <link
      xlink:href="${downloadUrl}"
      xlink:show="new"
     >Download</link> the ${projectName} .war file.
    </para>
   </step>

   <step>
    <para>
     Deploy ${projectName} in the root context.
    </para>

    <para>
     Copy the ${projectName} .war file as <filename>root.war</filename>
     to the <filename>/path/to/jetty/webapps/</filename>.
    </para>

    <screen>
$ <userinput>cp ${openigWar} /path/to/jetty/webapps/root.war</userinput>
    </screen>

    <para>
     Jetty automatically deploys ${projectName} in the root context on startup.
    </para>
   </step>

   <step>
    <para>Start Jetty in the background:</para>

    <screen>
$ <userinput>/path/to/jetty/bin/jetty.sh start</userinput>
    </screen>

    <para>Or start Jetty in the foreground:</para>

    <screen>
$ <userinput>cd /path/to/jetty/</userinput>
$ <userinput>java -jar start.jar</userinput>
    </screen>
   </step>

   <step>
    <para>
     Verify that you can see the ${projectName} welcome page at
     <link xlink:show="new" xlink:href="http://localhost:8080" />.
    </para>

    <para>
     When you start ${projectName} without a configuration,
     requests to ${projectName} default to a welcome page
     with a link to the documentation.
    </para>
   </step>

   <step>
    <para>
     Stop Jetty in the background:
    </para>

    <screen>
$ <userinput>/path/to/jetty/bin/jetty.sh stop</userinput>
    </screen>

    <para>
     Or stop Jetty in the foreground
     by entering Ctrl+C in the terminal where Jetty is running.
    </para>
   </step>
  </procedure>
 </section>

 <section xml:id="quickstart-sample-app">
  <title>Install an Application to Protect</title>

  <para>
   Now that ${projectName} is installed,
   set up a sample application to protect.
  </para>

  <procedure>

   <para>
    Follow these steps.
   </para>

   <step>
    <xinclude:include href="${sampleServerDownloadDoc}">
     <xinclude:fallback>
      <para>
       Failed to include sample server download link.
      </para>
     </xinclude:fallback>
    </xinclude:include>

    <screen>
$ <userinput>java -jar ${sampleServerJar}</userinput>
<computeroutput>Jun 11, 2014 4:32:42 PM org.forgerock.openig.doc.SampleServer runServer
INFO: Starting HTTP server on port 8081
Jun 11, 2014 4:32:42 PM org.glassfish.grizzly.http.server.NetworkListener start
INFO: Started listener bound to [0.0.0.0:8081]
Jun 11, 2014 4:32:42 PM org.glassfish.grizzly.http.server.HttpServer start
INFO: [HttpServer] Started.
Jun 11, 2014 4:32:42 PM org.forgerock.openig.doc.SampleServer runServer
INFO: Press Ctrl+C to stop the server.
</computeroutput>
    </screen>

    <para>
     By default, this server listens on port 8081.
     If that port is not free, specify another port.
    </para>

    <screen>
$ <userinput>java -jar ${sampleServerJar} 8888</userinput>
<computeroutput>Jun 11, 2014 4:33:04 PM org.forgerock.openig.doc.SampleServer runServer
INFO: Starting HTTP server on port 8888
Jun 11, 2014 4:33:04 PM org.glassfish.grizzly.http.server.NetworkListener start
INFO: Started listener bound to [0.0.0.0:8888]
Jun 11, 2014 4:33:04 PM org.glassfish.grizzly.http.server.HttpServer start
INFO: [HttpServer] Started.
Jun 11, 2014 4:33:04 PM org.forgerock.openig.doc.SampleServer runServer
INFO: Press Ctrl+C to stop the server.</computeroutput>
    </screen>
   </step>

   <step>
    <para>
     Now access the minimal HTTP server through a browser at
     <link xlink:show="new" xlink:href="http://localhost:8081" />.
    </para>

    <para>
     Login with username <literal>demo</literal>,
     password <literal>changeit</literal>.
     You should see a page that includes the username, <literal>demo</literal>,
     and some information about your browser request.
    </para>
   </step>
  </procedure>
 </section>

 <section xml:id="quickstart-config">
  <title>Configure ${projectName}</title>

  <para>
   Now that you have installed both ${projectName}
   and also a sample application to protect,
   and configure ${projectName}.
  </para>

  <procedure>

   <para>
    Follow these steps to configure ${projectName}
    to proxy traffic to the sample application.
   </para>

   <step>
    <para>
     Prepare the ${projectName} configuration.
    </para>

    <para>
     Copy the basic configuration file from the example,
     <link
      xlink:show="new"
      xlink:href="gateway-guide#config-proxy-and-capture"
      xlink:role="http://docbook.org/xlink/role/olink"
     ><citetitle>Configuration for Proxy &amp; Capture</citetitle></link>,
     to <filename>${warConfigDir}/config.json</filename>.
     By default, ${projectName} looks for <filename>config.json</filename>
     in the <filename>${warConfigDir}</filename> directory.
    </para>

    <screen>
$ <userinput>mkdir -p ${warConfigDir}</userinput>
$ <userinput>cp config.json ${warConfigDir}/config.json</userinput>
    </screen>

    <para>
     On Windows, the configuration files belong in
     <filename>${windowsWarConfigDir}</filename>.
     To locate the <filename>%appdata%</filename> folder
     for your version of Windows,
     open Windows Explorer,
     type <literal>%appdata%</literal> as the file path,
     and press Enter.
     You must create the <filename>${windowsWarConfigDir}</filename> folder,
     and then copy the configuration files.
    </para>

    <para>
     Also on Windows, change the capture log file name
     in <filename>config.json</filename>
     from <filename>/tmp/gateway.log</filename>
     to a file system location that works for Windows systems,
     such as <filename>C:\Temp\gateway.log</filename>.
    </para>
   </step>

   <step>
    <para>Start Jetty in the background:</para>

    <screen>
$ <userinput>/path/to/jetty/bin/jetty.sh start</userinput>
    </screen>

    <para>Or start Jetty in the foreground:</para>

    <screen>
$ <userinput>cd /path/to/jetty/</userinput>
$ <userinput>java -jar start.jar</userinput>
    </screen>
   </step>
  </procedure>
 </section>

 <section xml:id="quickstart-network-config">
  <title>Configure the Network</title>

  <para>
   So far you have deployed ${projectName} in the root context of Jetty on port 8080.
   Since ${projectName} is a reverse proxy you must make sure
   that all traffic from your browser to the protected application
   goes through ${projectName}.
   In other words, the network must be configured
   so that the browser goes to ${projectName}
   instead of going directly to the protected application.
  </para>

  <para>
   Although if you followed the installation steps you are running
   both ${projectName} and the minimal HTTP server
   on the same host as your browser (probably your laptop or desktop),
   keep in mind that network configuration is an important deployment step.
   To encourage you to keep this in mind,
   the sample configuration for this chapter expects the minimal HTTP server
   to be running on <literal>www.example.com</literal>,
   rather than <literal>localhost</literal>.
  </para>

  <para>
   The quickest way to configure the network locally is to add an entry to your
   <filename>/etc/hosts</filename> file on UNIX systems
   or <filename>%SystemRoot%\system32\drivers\etc\hosts</filename> on Windows.
   See the Wikipedia entry,
   <link
    xlink:show="new"
    xlink:href="http://en.wikipedia.org/wiki/Hosts_(file)"
   ><citetitle>Hosts (file)</citetitle></link>,
   for more information on host files.
   If you are indeed running all servers in this chapter on the same host,
   add the following entry to the hosts file.
  </para>

  <programlisting>127.0.0.1    www.example.com</programlisting>

  <para>
   If you are running the browser and ${projectName} on separate hosts,
   add the IP address of the host running ${projectName}
   to the hosts file on the system running the browser,
   where the host name matches that of protected application.
   For example, if ${projectName} is running on a host with IP address 192.168.0.15:
  </para>

  <programlisting>192.168.0.15    www.example.com</programlisting>

  <para>
   If ${projectName} is on a different host from the protected application,
   also make sure that the host name of the protected application
   resolves correctly for requests from ${projectName} to the application.
  </para>

  <tip>
   <para>
    Some browsers cache IP address resolutions,
    even after clearing all browsing data.
    Restart the browser after changing the IP addresses of named hosts.
  </para>

  <para>
    The simplest way to make sure you have configured
    your DNS or host settings properly for remote systems is to stop ${projectName}
    and then to make sure you cannot reach the target application
    with the host name and port number of ${projectName}.
    If you can still reach it, double check your host settings.
  </para>

  <para>
    Also make sure name resolution is configured to check host files before DNS.
    This configuration can be found in <filename>/etc/nsswitch.conf</filename>
    for most UNIX systems.
    Make sure <literal>files</literal> is listed before <literal>dns</literal>.
   </para>
  </tip>
 </section>

 <section xml:id="quickstart-try-it-out">
  <title>Try It Out</title>

  <para>
   <link xlink:show="new" xlink:href="http://www.example.com:8080/" />
   should take you to the home page of the minimal HTTP server.
  </para>

  <orderedlist>
   <para>
    Now change the ${projectName} configuration to log you in automatically
    with hard-coded credentials.
   </para>

   <listitem>
    <para>
     Edit the configuration file, <filename>config.json</filename>,
     to automatically log you in as username <literal>demo</literal>,
     password <literal>password</literal>.
    </para>

    <orderedlist>
     <para>
      To do this, make the following two changes to the file.
     </para>

     <listitem>
      <para>
       Between the <literal>"OutgoingChain"</literal> object
       and the "CaptureFilter" object,
       add a new <literal>StaticRequestFilter</literal> configuration object.
      </para>

      <para>
       The <literal>StaticRequestFilter</literal> performs
       an HTTP POST of the username and password as form data.
       ${projectName} supports a variety of ways to get the credentials,
       but for now just hard code them into the configuration.
      </para>

      <para>
       The new filter configuration object should look like this:
      </para>

      <programlisting language="javascript">
{
    "name": "LoginRequest",
    "type": "StaticRequestFilter",
    "config": {
        "method": "POST",
        "uri": "http://www.example.com:8081",
        "form": {
            "username": [
                "demo"
            ],
            "password": [
                "changeit"
            ]
        }
    }
}
      </programlisting>

      <para>
       Do not forget to add the comma after the object,
       so that your configuration file remains valid JSON.
      </para>
     </listitem>

     <listitem>
      <para>
       Edit the list of filters in the "OutgoingChain" object
       to include your new filter before the "CaptureFilter".
      </para>

      <para>
       The full "OutgoingChain" object should now look like this:
      </para>

      <programlisting language="javascript">
{
    "name": "OutgoingChain",
    "type": "Chain",
    "config": {
        "filters": [
            "LoginRequest",
            "CaptureFilter"
        ],
        "handler": "DefaultHandler"
    }
}
      </programlisting>
     </listitem>
    </orderedlist>

    <para>
     Make sure that the configuration is valid JSON,
     and then save your changes.
    </para>

    <para>
     The resulting configuration file should be very close to the example,
     <link
      xlink:show="new"
      xlink:href="gateway-guide#config-login-static-request"
      xlink:role="http://docbook.org/xlink/role/olink"
     ><citetitle>Configuration for Hard-Coded Credentials</citetitle></link>.
    </para>
   </listitem>

   <listitem>
    <para>
     Restart the Jetty server where ${projectName} is deployed.
    </para>
   </listitem>

   <listitem>
    <para>
     Access the home page again,
     <link xlink:show="new" xlink:href="http://www.example.com:8080/" />.
    </para>

    <para>
     This time, ${projectName} logs you in automatically.
    </para>
   </listitem>
  </orderedlist>

  <para>
   Also view the file capturing information about requests and responses.
   In the default sample configuration,
   this file is <filename>/tmp/gateway.log</filename>.
  </para>

  <para>
   What's happening behind the scenes?
  </para>

  <para>
   When your browser goes to <literal>http://www.example.com:8080/</literal>,
   it is actually connecting to ${projectName} deployed in Jetty.
   ${projectName} proxies all traffic it receives to the protected application at
   <literal>http://www.example.com:8080/</literal>,
   and returns responses from the application to your browser.
  </para>

  <para>
   With the original configuration,
   ${projectName} does not change requests or responses,
   but only proxies requests and responses,
   and captures request and response information.
  </para>

  <para>
   After you change the configuration,
   ${projectName} continues to capture request and response data.
   And ${projectName} also replaces your browser's original HTTP GET request
   with an HTTP POST login request containing credentials to authenticate.
   As a result, instead of the home page with a login form,
   ${projectName} logs you in directly,
   and the application responds with the page you see after logging in.
   ${projectName} then returns this response to your browser.
  </para>

  <para>
   The following sequence diagram shows the steps.
  </para>

  <figure xml:id="figure-hard-coded-login">
   <mediaobject>
    <imageobject>
     <imagedata fileref="images/hard-coded-login.png" format="PNG" />
    </imageobject>
    <textobject>
     <para>
      This image diagrams the steps showing how ${projectName} performs login
      with hard-coded credentials and a static request filter.
     </para>
    </textobject>
   </mediaobject>
  </figure>

  <orderedlist>
   <listitem>
    <para>
     The browser host makes a DNS request for
     the IP address of the HTTP server host, <literal>www.example.com</literal>.
    </para>
   </listitem>

   <listitem>
    <para>
     DNS responds with the address for ${projectName}.
    </para>
   </listitem>

   <listitem>
    <para>
     Browser sends a request to the HTTP server.
    </para>
   </listitem>

   <listitem>
    <para>
     ${projectName} replaces the request with an HTTP POST request,
     including the login form with hard-coded credentials.
    </para>
   </listitem>

   <listitem>
    <para>
     HTTP server validates the credentials,
     and responds with the profile page.
    </para>
   </listitem>

   <listitem>
    <para>
     ${projectName} passes the response back to the browser.
    </para>
   </listitem>
  </orderedlist>
 </section>

 <section xml:id="quickstart-where-to-go-from-here">
  <title>Where To Go From Here</title>

  <para>
   In this chapter, you have scratched the surface of ${projectName}.
   For more information, start with these chapters.
  </para>

  <variablelist>
   <varlistentry>
    <term><link
      xlink:show="new"
      xlink:href="gateway-guide#chap-usecases"
      xlink:role="http://docbook.org/xlink/role/olink"
     ><citetitle>Detailed Use Cases</citetitle></link>
    </term>
    <listitem>
     <para>
      This chapter covers common use case request and response flows.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><link
      xlink:show="new"
      xlink:href="gateway-guide#chap-install"
      xlink:role="http://docbook.org/xlink/role/olink"
     ><citetitle>Installing ${projectName}</citetitle></link>
    </term>
    <listitem>
     <para>
      This chapter covers everything you need to install ${projectName}.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><link
      xlink:show="new"
      xlink:href="gateway-guide#chap-credentials-tutorial"
      xlink:role="http://docbook.org/xlink/role/olink"
     ><citetitle>Tutorial On Looking Up Credentials</citetitle></link>
    </term>
    <listitem>
     <para>
      This chapter shows you how to configure ${projectName}
      to look up credentials in external sources, such as a file or a database.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><link
      xlink:show="new"
      xlink:href="gateway-guide#chap-gateway-templates"
      xlink:role="http://docbook.org/xlink/role/olink"
     ><citetitle>Configuration Templates</citetitle></link>
    </term>
    <listitem>
     <para>
      This chapter provides sample ${projectName} configuration files
      for common use cases.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><link
      xlink:show="new"
      xlink:href="gateway-guide#chap-federation-tutorial"
      xlink:role="http://docbook.org/xlink/role/olink"
     ><citetitle>Tutorial For ${projectName} Federation</citetitle></link>
    </term>
    <listitem>
     <para>
      This chapter shows how to configure ${projectName} to get credentials
      from a SAML 2.0 Identity Provider.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><link
      xlink:show="new"
      xlink:href="gateway-guide#chap-oath-rs"
      xlink:role="http://docbook.org/xlink/role/olink"
     ><citetitle>Configuring ${projectName} as an OAuth 2.0 Resource Server</citetitle></link>
    </term>
    <listitem>
     <para>
      This chapter explains how ${projectName} acts
      as an OAuth 2.0 Resource Server,
      and follows with a tutorial
      that shows you how to use ${projectName} as a resource server.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><link
      xlink:show="new"
      xlink:href="gateway-guide#chap-oath2-client"
      xlink:role="http://docbook.org/xlink/role/olink"
     ><citetitle>Configuring ${projectName} as an OAuth 2.0 Client</citetitle></link>
    </term>
    <listitem>
     <para>
      This chapter explains how ${projectName} acts
      as an OAuth 2.0 client or OpenID Connect 1.0 relying party,
      and follows with a tutorial
      that shows you how to use ${projectName}
      as an OpenID Connect 1.0 relying party.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><link
      xlink:show="new"
      xlink:href="gateway-guide#chap-routing"
      xlink:role="http://docbook.org/xlink/role/olink"
     ><citetitle>Routing Tutorial</citetitle></link>
    </term>
    <listitem>
     <para>
      This chapter shows how to configure ${projectName}
      to allow dynamic configuration changes and route to multiple applications.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   ForgeRock can also help you succeed in your projects involving ${projectName}.
   You can purchase ${projectName} support subscriptions and training courses
   from ForgeRock and from consulting partners around the world and in your area.
   To contact ForgeRock, send mail to
   <link xlink:href="mailto:info@forgerock.com">info@forgerock.com</link>.
   To find a partner in your area, see
   <link
    xlink:show="new"
    xlink:href="http://forgerock.com/partners/find-a-partner/" />.
  </para>
 </section>
</chapter>
