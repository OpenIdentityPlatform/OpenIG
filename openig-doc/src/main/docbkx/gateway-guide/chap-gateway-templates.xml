<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START
  !
  ! This work is licensed under the Creative Commons
  ! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  ! To view a copy of this license, visit
  ! http://creativecommons.org/licenses/by-nc-nd/3.0/
  ! or send a letter to Creative Commons, 444 Castro Street,
  ! Suite 900, Mountain View, California, 94041, USA.
  !
  ! You can also obtain a copy of the license at
  ! trunk/legal/CC-BY-NC-ND.txt.
  ! See the License for the specific language governing permissions
  ! and limitations under the License.
  !
  ! If applicable, add the following below this CCPL HEADER, with the fields
  ! enclosed by brackets "[]" replaced with your own identifying information:
  !      Portions Copyright [yyyy] [name of copyright owner]
  !
  ! CCPL HEADER END
  !
  !      Copyright 2010-2011 ApexIdentity Inc.
  !      Portions Copyright 2012-2015 ForgeRock AS.
  !
-->
<chapter xml:id='chap-gateway-templates'
         xmlns='http://docbook.org/ns/docbook'
         version='5.0' xml:lang='en'
         xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
         xsi:schemaLocation='http://docbook.org/ns/docbook
                             http://docbook.org/xml/5.0/xsd/docbook.xsd'
         xmlns:xlink='http://www.w3.org/1999/xlink'
         xmlns:xinclude='http://www.w3.org/2001/XInclude'>
 <title>Configuration Templates</title>

 <para>
  This chapter contains template routes for common configurations.
 </para>

 <para>
  Before you use one of the templates here,
  install and configure ${projectName} with a Router and default route
  as described in the chapter on
  <link
   xlink:show="new"
   xlink:href="gateway-guide#chap-quickstart"
   xlink:role="http://docbook.org/xlink/role/olink"
  ><citetitle>Getting Started</citetitle></link>.
 </para>

 <para>
  Next, take one of the templates and then modify it to suit your deployment.
  Read the summary of each template to find the right match for your application.
 </para>

 <para>
  When you move to use ${projectName} in production,
  be sure to turn off DEBUG level logging,
  and to deactivate "CaptureDecorator" use to avoid filling up disk space.
  Also consider locking down the Router configuration.
 </para>

 <section xml:id="template-proxy-capture">
  <title>Proxy &amp; Capture</title>

  <indexterm>
   <primary>Configuration</primary>
   <secondary>Proxy &amp; capture</secondary>
  </indexterm>

  <para>
   If you installed and configured ${projectName}
   with a Router and default route as described in the chapter on
   <link
    xlink:show="new"
    xlink:href="gateway-guide#chap-quickstart"
    xlink:role="http://docbook.org/xlink/role/olink"
   ><citetitle>Getting Started</citetitle></link>,
   then you already proxy &amp; capture
   both the application requests coming in and the server responses going out.
  </para>

  <para>
   The route shown in <xref linkend="example-proxy-capture" />
   uses a DispatchHandler to change the scheme to HTTPS on login.
   To use this template change the baseURI settings
   to match those of the target application.
   This template references a ClientHandler
   defined in <filename>config.json</filename>.
  </para>

  <para>
   When connecting to the protected application over HTTPS,
   the ClientHandler must use an HttpClient
   that can trust the application's public key server certificate.
   If the certificate was signed by a well-known Certificate Authority,
   then there should be no further configuration to do.
   Otherwise use a ClientHandler that references a trust store
   holding the certificate.
  </para>

  <example xml:id="example-proxy-capture"><?dbfo pgwide="1"?>
   <title>Proxy and Capture</title>

   <programlisting language="javascript">
<xinclude:include parse="text" href="resources/config/routes/20-capture.json">
 <xinclude:fallback>
  Failed to include JSON
 </xinclude:fallback>
</xinclude:include>
   </programlisting>
  </example>

  <para>
   To try this example with the sample application,
   save the file as <filename>${warRoutesDir}/20-capture.json</filename>,
   and browse to
   <link xlink:href="http://www.example.com:8080/login?demo=capture" xlink:show="new" />.
  </para>

  <para>
   To use this as a default route with a real application,
   remove the route-level condition on the handler
   that specifies a <literal>demo</literal> query string parameter.
  </para>
 </section>

 <section xml:id="template-simple-login">
  <title>Simple Login Form</title>

  <indexterm>
   <primary>Configuration</primary>
   <secondary>Simple login form</secondary>
  </indexterm>

  <para>
   The route in <xref linkend="example-simple-login" />
   logs the user into the target application
   with hard-coded user name and password.
   The route intercepts the login page request
   and replaces it with the login form.
   Adapt the uri, form, and baseURI settings as necessary.
  </para>

  <example xml:id="example-simple-login"><?dbfo pgwide="1"?>
   <title>Simple Login Form</title>

   <programlisting language="javascript">
<xinclude:include parse="text" href="resources/config/routes/21-simple.json">
 <xinclude:fallback>
  Failed to include JSON
 </xinclude:fallback>
</xinclude:include>
   </programlisting>
  </example>

  <para>
   The parameters in the StaticRequestFilter form,
   such as <literal>MY_USERNAME</literal> and <literal>MY_PASSWORD</literal>,
   can have string values, and they can also use expressions.
   This template references a ClientHandler
   defined in <filename>config.json</filename>.
   When connecting to the protected application over HTTPS,
   the ClientHandler must use an HttpClient
   that can trust the application's public key server certificate.
  </para>

  <para>
   To try this example with the sample application,
   save the file as <filename>${warRoutesDir}/21-simple.json</filename>,
   replace <literal>MY_USERNAME</literal> with <literal>demo</literal>
   and <literal>MY_PASSWORD</literal> with <literal>changeit</literal>,
   and browse to
   <link xlink:href="http://www.example.com:8080/login?demo=simple" xlink:show="new" />.
  </para>

  <para>
   To use this as a default route with a real application,
   remove the route-level condition on the handler
   that specifies a <literal>demo</literal> query string parameter.
  </para>
 </section>

 <section xml:id="template-login-cookie">
  <title>Login Form With Cookie From Login Page</title>

  <indexterm>
   <primary>Configuration</primary>
   <secondary>Login with cookie</secondary>
  </indexterm>

  <para>
   Some applications expect a cookie from the login page
   to be sent in the login request form.
   The route in <xref linkend="example-login-cookie" />
   allows the login page request to go through to the target,
   intercepts the response,
   then creates the login form and adds the intercepted cookie to the POST.
   Adapt the baseURI, uri, form, and cookie settings as necessary.
  </para>

  <example xml:id="example-login-cookie"><?dbfo pgwide="1"?>
   <title>Login Form With Cookie From Login Page</title>

   <programlisting language="javascript">
<xinclude:include parse="text" href="resources/config/routes/22-cookie.json">
 <xinclude:fallback>
  Failed to include JSON
 </xinclude:fallback>
</xinclude:include>
   </programlisting>
  </example>

  <para>
   The parameters in the StaticRequestFilter form,
   such as <literal>MY_USERNAME</literal> and <literal>MY_PASSWORD</literal>,
   can have string values, and they can also use expressions.
   This template references a ClientHandler
   defined in <filename>config.json</filename>.
   When connecting to the protected application over HTTPS,
   the ClientHandler must use an HttpClient
   that can trust the application's public key server certificate.
  </para>

  <para>
   To try this example with the sample application,
   save the file as <filename>${warRoutesDir}/22-cookie.json</filename>,
   replace <literal>MY_USERNAME</literal> with <literal>kramer</literal>
   and <literal>MY_PASSWORD</literal> with <literal>newman</literal>,
   and browse to
   <link xlink:href="http://www.example.com:8080/login?demo=cookie" xlink:show="new" />.
  </para>

  <para>
   To use this as a default route with a real application,
   remove the route-level condition on the handler
   that specifies a <literal>demo</literal> query string parameter.
  </para>
 </section>

 <section xml:id="template-login-extract-cookie-filters">
  <title>Login Form With Extract Filter &amp; Cookie Filter</title>

  <indexterm>
   <primary>Configuration</primary>
   <secondary>Login with filter</secondary>
  </indexterm>

  <para>
   The route in <xref linkend="example-login-extract-cookie-filters" />
   works with an application that returns the login page
   when the user tries to access a page without a valid session.
   This route shows how to use the EntityExtractFilter to find the login page
   with a pattern that matches the OpenAM Classic UI page.
   The route uses the CookieFilter to ensure
   that the cookies from the application are replayed on each request.
  </para>

  <note>
   <para>
    Without the CookieFilter in the OutgoingChain
    the cookie set in the login page response would not get set in the browser
    since that request is intercepted before it gets to the browser.
    The simplest way to deal with this situation is
    to let ${projectName} manage all the cookies by enabling the CookieFilter.
    The side effect of ${projectName} managing cookies is
    none of the cookies are sent to the browser,
    but are managed locally by ${projectName}.
   </para>
  </note>

  <example xml:id="example-login-extract-cookie-filters"><?dbfo pgwide="1"?>
   <programlisting language="javascript">
<xinclude:include parse="text" href="resources/config/routes/23-classic.json">
 <xinclude:fallback>
  Failed to include JSON
 </xinclude:fallback>
</xinclude:include>
   </programlisting>
  </example>

  <para>
   The parameters in the StaticRequestFilter form,
   can have string values, and they can also use expressions.
   This route references a ClientHandler
   defined in <filename>config.json</filename>.
  </para>

  <para>
   To try this example with the sample application,
   save the file as <filename>${warRoutesDir}/23-classic.json</filename>,
   and use the <command>curl</command> command to check that it works
   as in the following example,
   which shows that the CookieFilter has removed cookies from the response
   except for the session cookie added by the container.
  </para>

  <screen>
$ <userinput>curl -D- http://www.example.com:8080/login/?demo=classic</userinput>
<computeroutput>HTTP/1.1 200 OK
...
Set-Cookie: JSESSIONID=1gwp5h0ugkciv1g200c9hid4sp;Path=/
Content-Length: 15
Content-Type: text/plain;charset=ISO-8859-1
...

Welcome, demo!</computeroutput>
  </screen>

  <para>
   To use this as a default route with a real application,
   remove the route-level condition on the handler
   that specifies a <literal>demo</literal> query string parameter,
   and adjust the EntityExtractFilter and StaticRequestFilter as necessary.
  </para>
 </section>

 <section xml:id="template-login-hidden-value">
  <title>Login Which Requires a Hidden Value From the Login Page</title>

  <indexterm>
   <primary>Configuration</primary>
   <secondary>Login with hidden value</secondary>
  </indexterm>

  <para>
   Some applications call for extracting a hidden value from the login page
   and including the value in the login form POSTed to the target application.
   The route in <xref linkend="example-login-hidden-value" />
   extracts a hidden value from the login page,
   and posts a static form including the hidden value.
  </para>

  <example xml:id="example-login-hidden-value"><?dbfo pgwide="1"?>
   <title>Login Which Requires a Hidden Value From the Login Page</title>

   <programlisting language="javascript">
<xinclude:include parse="text" href="resources/config/routes/24-hidden.json">
 <xinclude:fallback>
  Failed to include JSON
 </xinclude:fallback>
</xinclude:include>
   </programlisting>
  </example>

  <para>
   The parameters in the StaticRequestFilter form,
   such as <literal>MY_USERNAME</literal> and <literal>MY_PASSWORD</literal>,
   can have string values, and they can also use expressions.
   This template references a ClientHandler
   defined in <filename>config.json</filename>.
   When connecting to the protected application over HTTPS,
   the ClientHandler must use an HttpClient
   that can trust the application's public key server certificate.
  </para>

  <para>
   To try this example with the sample application,
   save the file as <filename>${warRoutesDir}/24-hidden.json</filename>,
   replace <literal>MY_USERNAME</literal> with <literal>scarter</literal>
   and <literal>MY_PASSWORD</literal> with <literal>sprain</literal>,
   and browse to
   <link xlink:href="http://www.example.com:8080/login?demo=hidden" xlink:show="new" />.
  </para>

  <para>
   To use this as a default route with a real application,
   remove the route-level condition on the handler
   that specifies a <literal>demo</literal> query string parameter.
  </para>
 </section>

 <section xml:id="template-http-and-https">
  <title>HTTP and HTTPS Application</title>

  <indexterm>
   <primary>Configuration</primary>
   <secondary>HTTP and HTTPS</secondary>
  </indexterm>

  <para>
   The route in <xref linkend="example-http-and-https" />
   proxies traffic to an application with both HTTP and HTTPS ports.
   The application uses HTTPS for authentication
   and HTTP for the general application features.
   Assuming all login requests are made over HTTPS,
   you must add the login filters and handlers to the Chain.
  </para>

  <example xml:id="example-http-and-https"><?dbfo pgwide="1"?>
   <title>HTTP and HTTPS Application</title>

   <programlisting language="javascript">
<xinclude:include parse="text" href="resources/config/routes/25-https.json">
 <xinclude:fallback>
  Failed to include JSON
 </xinclude:fallback>
</xinclude:include>
   </programlisting>
  </example>

  <para>
   This template references a ClientHandler
   defined in <filename>config.json</filename>.
   When connecting to the protected application over HTTPS,
   the ClientHandler must use an HttpClient
   that can trust the application's public key server certificate.
  </para>

  <para>
   To try this example with the sample application,
   save the file as <filename>${warRoutesDir}/25-https.json</filename>,
   and browse to
   <link xlink:href="http://www.example.com:8080/login?demo=https" xlink:show="new" />.
  </para>

  <para>
   To use this as a default route with a real application,
   remove the route-level condition on the handler
   that specifies a <literal>demo</literal> query string parameter.
  </para>
 </section>

 <section xml:id="template-am-integration-headers">
  <title>OpenAM Integration With Headers</title>

  <para>
   The route in <xref linkend="example-am-integration-headers" />
   logs the user into the target application
   using the headers such as those passed in from an OpenAM policy agent.
   If the header passed in contains only a user name or subject
   and requires a lookup to an external data source,
   you must add an attribute filter to the chain to retrieve the credentials.
  </para>

  <example xml:id="example-am-integration-headers"><?dbfo pgwide="1"?>
   <title>OpenAM Integration With Headers</title>

   <programlisting language="javascript">
<xinclude:include parse="text" href="resources/config/routes/26-headers.json">
 <xinclude:fallback>
  Failed to include JSON
 </xinclude:fallback>
</xinclude:include>
   </programlisting>
  </example>

  <para>
   This template references a ClientHandler
   defined in <filename>config.json</filename>.
   When connecting to the protected application over HTTPS,
   the ClientHandler must use an HttpClient
   that can trust the application's public key server certificate.
  </para>

  <para>
   To try this example with the sample application,
   save the file as <filename>${warRoutesDir}/25-headers.json</filename>,
   and use the <command>curl</command> command
   to simulate the headers being passed in from an OpenAM policy agent
   as in the following example:
  </para>

  <screen>
$ <userinput>curl \
 --header "username: kvaughan" \
 --header "password: bribery" \
 http://www.example.com:8080/login?demo=headers</userinput>
<computeroutput>...<![CDATA[
    <title id="welcome">Howdy, kvaughan</title>
]]>...</computeroutput>
  </screen>

  <para>
   To use this as a default route with a real application,
   remove the route-level condition on the handler
   that specifies a <literal>demo</literal> query string parameter.
  </para>
 </section>

 <section xml:id="template-owa-online">
  <title>Microsoft Online Outlook Web Access</title>

  <indexterm>
   <primary>Configuration</primary>
   <secondary>Microsoft Online Outlook Web Access</secondary>
  </indexterm>

  <para>
   The route in <xref linkend="example-owa-online" />
   logs the user into Microsoft Online Outlook Web Access (OWA).
   The example shows how you would use ${projectName}
   and the OpenAM password capture feature to integrate with OWA.
   You can follow the chapter on
   <link
    xlink:show="new"
    xlink:href="gateway-guide#chap-password-capture-replay-tutorial"
    xlink:role="http://docbook.org/xlink/role/olink"
   ><citetitle>Getting Login Credentials From OpenAM</citetitle></link>,
   and substitute this template as a replacement for the default route.
  </para>

  <example xml:id="example-owa-online"><?dbfo pgwide="1"?>
   <title>Microsoft Online Outlook Web Access</title>

   <programlisting language="javascript">
<xinclude:include parse="text" href="resources/config/routes/27-owa.json">
 <xinclude:fallback>
  Failed to include JSON
 </xinclude:fallback>
</xinclude:include>
   </programlisting>
  </example>

  <para>
   To try this example  save the file as
   <filename>${warRoutesDir}/27-owa.json</filename>.
   Change <literal>DESKEY</literal> to the actual key value
   that you generated when following the instructions in
   <link
    xlink:show="new"
    xlink:href="gateway-guide#password-capture-configuration"
    xlink:role="http://docbook.org/xlink/role/olink"
   >Configuring Password Capture</link>.
   This template references a ClientHandler
   defined in <filename>config.json</filename>.
  </para>

  <para>
   To use this as a default route with a real application,
   remove the route-level condition on the handler
   that specifies a <literal>demo</literal> query string parameter.
  </para>
 </section>
</chapter>
