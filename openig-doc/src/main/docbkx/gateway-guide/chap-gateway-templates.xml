<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START
  !
  ! This work is licensed under the Creative Commons
  ! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  ! To view a copy of this license, visit
  ! http://creativecommons.org/licenses/by-nc-nd/3.0/
  ! or send a letter to Creative Commons, 444 Castro Street,
  ! Suite 900, Mountain View, California, 94041, USA.
  !
  ! You can also obtain a copy of the license at
  ! trunk/legal/CC-BY-NC-ND.txt.
  ! See the License for the specific language governing permissions
  ! and limitations under the License.
  !
  ! If applicable, add the following below this CCPL HEADER, with the fields
  ! enclosed by brackets "[]" replaced with your own identifying information:
  !      Portions Copyright [yyyy] [name of copyright owner]
  !
  ! CCPL HEADER END
  !
  !      Copyright © 2010–2011 ApexIdentity Inc. All rights reserved.
  !      Portions Copyright 2012-2014 ForgeRock AS
  !    
-->
<chapter xml:id='chap-gateway-templates'
 xmlns='http://docbook.org/ns/docbook'
 version='5.0' xml:lang='en'
 xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
 xsi:schemaLocation='http://docbook.org/ns/docbook
                     http://docbook.org/xml/5.0/xsd/docbook.xsd'
 xmlns:xlink='http://www.w3.org/1999/xlink'
 xmlns:xinclude='http://www.w3.org/2001/XInclude'>
 <title>Configuration Templates</title>

 <para>This chapter contains templates of common configurations. Start with one
 of our templates and then modify to suit your deployment. Read the summary of
 each template to find the right match for your application. If you are not
 sure about the characteristics of your application, start with the basic
 Application Capture template. This template allows you to setup basic proxying
 and capture the traffic of the login sequence in a flat file, which then
 allows you to analyze the application and subsequently choose the right
 template or add your own configuration.</para>

 <note>
  <itemizedlist>
   <listitem>
    <para>All templates have the <link xlink:href="reference#CaptureFilter"
    xlink:role="http://docbook.org/xlink/role/olink">CaptureFilter</link>
    enabled by default. Remove the capture filter from the outgoing chain
    before running the gateway in production. Capturing is typically used only
    for initial development or debugging and may rapidly fill up your available
    disk space if left enabled.</para>
   </listitem>
   <listitem>
    <para>Substitute the <literal>TARGETIP</literal> tag with the IP address of
    your application.</para>
   </listitem>
   <listitem>
    <para>Modify the <literal>LoginRequest</literal> filter to match the form
    required for login by your target application.</para>
   </listitem>
  </itemizedlist>
 </note>
  
 <section xml:id="template-proxy-capture">
  <title>Proxy &amp; Capture</title>

  <indexterm>
   <primary>Configuration</primary>
   <secondary>Proxy &amp; capture</secondary>
  </indexterm>

  <para>Proxies all requests and captures them in a flat file. Use this
  template if you need to analyze the traffic for your application. Simply
  change the <literal>baseURI</literal> to be that of the target application,
  restart OpenIG, and login to the application. The entire sequence is logged
  to the flat file.</para>

  <programlisting language="javascript"
  ><?dbfo pgwide="1"?><xinclude:include parse="text" href="capture.json"
  /></programlisting>
</section>

 <section xml:id="template-simple-login">
  <title>Simple Login Form</title>

  <indexterm>
   <primary>Configuration</primary>
   <secondary>Simple login form</secondary>
  </indexterm>

  <para>Logs the user into the target application with hard-coded user name
  and password. This template intercepts the login page request and replaces
  it with the login form.</para>
  
  <programlisting language="javascript"
  ><?dbfo pgwide="1"?><xinclude:include parse="text" href="loginSimple.json"
  /></programlisting>
 </section>

 <section xml:id="template-login-cookie">
  <title>Login Form With Cookie From Login Page</title>

  <indexterm>
   <primary>Configuration</primary>
   <secondary>Login with cookie</secondary>
  </indexterm>

  <para>For applications that expect a cookie from the login page to be sent
  in the login request form. This templates allows the login page request to
  go through to the target, intercepts the response, then creates the login
  form and adds the intercepted cookie to the POST.</para>
  
  <programlisting language="javascript"
  ><?dbfo pgwide="1"?><xinclude:include parse="text"
  href="loginWithCookie.json" /></programlisting>
 </section>

 <section xml:id="template-login-extract-cookie-filters">
  <title>Login Form With Extract Filter &amp; Cookie Filter</title>

  <indexterm>
   <primary>Configuration</primary>
   <secondary>Login with filter</secondary>
  </indexterm>

  <para>For applications that return the login page when the user tries to
  access a page without a valid session. This template shows how to use the
  <literal>ExtractFilter</literal> to find the login page on the response and
  use the <literal>CookieFilter</literal> to ensure the cookies from the
  application are replayed on each request. The sample application in this
  template is OpenAM. If you change the <literal>TARGETIP:PORT</literal> to be
  the IP address of OpenAM, the <literal>TARGETDN:PORT</literal> to be the
  fully qualified name and port of OpenAM and modify <literal>USERNAME</literal>
  and <literal>PASSWORD</literal> in the <literal>LoginRequest</literal> you
  automatically log <literal>USERNAME</literal> into OpenAM.</para>

  <note>
   <para>Without the <literal>CookieFilter</literal> in the
   <literal>OutgoingChain</literal> the cookie set in the login page response
   would not get set in the browser since that request is intercepted before
   it gets to the browser. The simplest way to deal with this situation is to
   let OpenIG manage all the cookies by enabling the
   <literal>CookieFilter</literal>. The side effect of OpenIG managing
   cookies is none of the cookies are sent to the browser, but are managed
   locally by OpenIG.</para>
  </note>

  <programlisting language="javascript"
  ><?dbfo pgwide="1"?><xinclude:include parse="text"
  href="loginWithCookieExtract.json" /></programlisting>
 </section>

 <section xml:id="template-login-hidden-value">
  <title>Login Which Requires a Hidden Value From the Login Page</title>

  <indexterm>
   <primary>Configuration</primary>
   <secondary>Login with hidden value</secondary>
  </indexterm>

  <para>Extracts a hidden value from the login page and includes it in the
  login form POSTed to the target application.</para>
  
  <programlisting language="javascript"
  ><?dbfo pgwide="1"?><xinclude:include parse="text"
  href="loginHiddenValue.json" /></programlisting>
 </section>

 <section xml:id="template-http-and-https">
  <title>HTTP &amp; HTTPS Application</title>

  <indexterm>
   <primary>Configuration</primary>
   <secondary>HTTP &amp; HTTPS</secondary>
  </indexterm>

  <para>Proxies traffic to an application listening on ports 80 and 443. The
  assumption is the application uses HTTPS for authentication and HTTP for the
  general application features. Assuming the login will all take place on
  port 443, you will need to add the login filters and handlers to the
  <literal>LoginChain</literal>. To get started quickly, modify the
  <literal>baseURI</literal> to be the <literal>IPAddress</literal> of your
  target application. This should allow you to proxy all traffic to the
  application. Then add the logic for the <literal>LoginChain</literal> using
  the flow from one of the login templates.</para>
  
  <programlisting language="javascript"
  ><?dbfo pgwide="1"?><xinclude:include parse="text" href="loginMixed.json"
  /></programlisting>
 </section>

 <section xml:id="template-multiple-apps">
  <title>Multiple Applications</title>

  <indexterm>
   <primary>Configuration</primary>
   <secondary>Multiple applications</secondary>
  </indexterm>

  <para>
   Shows how a single OpenIG configuration can proxy to
   multiple applications on different ports with the same IP address.
   This template is setup to proxy to
   both WordPress and MediaWiki hosted on the same web server.
   The <literal>DispatchHandler</literal> is used to route
   each incoming request to either the WordPress chain or the MediaWiki chain.
  </para>
  
  <programlisting language="javascript"
  ><?dbfo pgwide="1"?><xinclude:include parse="text"
  href="multipleApplications.json" /></programlisting>
 </section>

 <section xml:id="template-am-integration-headers">
  <title>OpenAM Integration With Headers</title>
  <para>Logs the user into the target application using the headers passed down
  from an OpenAM policy agent. This template assumes the user name and
  password are passed down by the OpenAM policy agent as headers. If the
  header passed in contains only a user name or subject and requires a lookup to
  an external data source, you must add an attribute filter to the chain to
  retrieve the credentials.</para>
  
  <programlisting language="javascript"
  ><?dbfo pgwide="1"?><xinclude:include parse="text" href="loginAMHeaders.json"
  /></programlisting>
 </section>

 <section xml:id="template-owa-online">
  <title>Microsoft Online Outlook Web Access</title>

  <indexterm>
   <primary>Configuration</primary>
   <secondary>Microsoft Online Outlook Web Access</secondary>
  </indexterm>

  <para>A sample template used to log a user into Microsoft Online Outlook Web
  Access. This template shows how you would use the Gateway and the OpenAM
  password capture feature to integrate with OWA. You can follow the
  <link xlink:href="gateway-guide#chap-password-capture-replay-tutorial"
  xlink:role="http://docbook.org/xlink/role/olink">Tutorial On Password Capture
  &amp; Replay</link> tutorial and substitute this template.</para>
  
  <programlisting language="javascript"
  ><?dbfo pgwide="1"?><xinclude:include parse="text" href="OWAOnline.json"
  /></programlisting>
 </section>
</chapter>
